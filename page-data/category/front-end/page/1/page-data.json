{"componentChunkName":"component---src-templates-category-template-js","path":"/category/front-end/page/1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/front-end/","slug":"/posts/pt-5-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"},"frontmatter":{"date":"2018-06-14T23:46:37.121Z","description":"Today, we'll explore a few techniques for improving perceived responsiveness for apps. We'll be looking at a few such techniques today (even though there are much more sophisticated and code intensive techniques out there). We'll use a technique that is employed by some of the most popular apps available today. Stay with us to find out more.","category":"Front End","title":"Pt 5: Build a CSS-in-JS React App with Styled Components and Priceline Design System"}}},{"node":{"fields":{"categorySlug":"/category/front-end/","slug":"/posts/pt-4-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"},"frontmatter":{"date":"2018-06-06T23:46:37.121Z","description":"Previously on this series, we learned more about state management in large applications and the benefits we could gain by adopting an architecture like Flux. We also add Redux application functionality to our FireLiners app complete with actions and Sagas.\nToday, we'll do just a little bit more. We'll be going in-depth into more state management practices and we'll setup dynamic data that we'll be using to populate our feed. Finally, we'll add functionality that allows us to persist our state to local storage.","category":"Front End","title":"Pt 4: Build a CSS-in-JS React App with Styled Components and Priceline Design System"}}},{"node":{"fields":{"categorySlug":"/category/front-end/","slug":"/posts/pt-3-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"},"frontmatter":{"date":"2018-05-25T23:46:37.121Z","description":"Previously on this series, we learned about lazy loading and its multiple performance benefits for our application. We then proceeded to implement lazy loading within our application using the `react-loadable` NPM package. We also created some custom styled components for our application.\nToday, we'll do just a little bit more. We'll setup a state management system for our application. We'll also setup route transition animations for smoother switches from one route to another.","category":"Front End","title":"Pt 3: Build a CSS-in-JS React App with Styled Components and Priceline Design System"}}},{"node":{"fields":{"categorySlug":"/category/front-end/","slug":"/posts/pt-2-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"},"frontmatter":{"date":"2018-05-18T23:46:37.121Z","description":"Last time on this series, we explored the CSS-in-JS paradigm and code splitting with Webpack. We also built a minimal app interface that uses styled components for displaying notable lines from hip hop verses.\nToday, we'll do some more development. We'll learn how to lazy-load on-demand route based code (i.e code specific to a certain route). We'll also explore more Priceline components and create some of our own components that leverage preexisting Priceline components. ","category":"Front End","title":"Pt 2: Build a CSS-in-JS React App with Styled Components and Priceline Design System"}}}]}},"pageContext":{"category":"Front End","currentPage":1,"postsLimit":4,"postsOffset":4,"prevPagePath":"/category/front-end","nextPagePath":"/category/front-end/page/2","hasPrevPage":true,"hasNextPage":true}},"staticQueryHashes":["251939775","401334301","4120999787"]}