{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/improve-async-network-state-handling-with-custom-react-hooks","result":{"data":{"markdownRemark":{"id":"605269e2-8f28-5cfa-a69d-02cd59a013c7","html":"<h1 id=\"improve-async-network-state-handling-with-custom-react-hooks\" style=\"position:relative;\"><a href=\"#improve-async-network-state-handling-with-custom-react-hooks\" aria-label=\"improve async network state handling with custom react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improve async network state handling with custom React Hooks</h1>\n<p>React offers us flexibility in how we choose to address problems (such as state, network, and style management) within our apps, and a great codebase has problem spots identified and addressed with a reproducible pattern that is standard and consistent. And, as frontend engineers, it’s crucial to properly relay information about changes in network state to the user, as most apps we build need to interact with one or more servers. We can accomplish these goals by using <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a><a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React custom Hooks</a>.</p>\n<p>In this article, I’ll cover the various states that network requests exist in and show you how to keep request management within custom Hooks. I’ll also walk you through building a small app that employs these Hooks.</p>\n<h2 id=\"what-is-a-network-request\" style=\"position:relative;\"><a href=\"#what-is-a-network-request\" aria-label=\"what is a network request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a network request?</h2>\n<p>A network request typically exists in these states:</p>\n<ul>\n<li><code class=\"language-text\">idle</code></li>\n<li><code class=\"language-text\">loading/processing/in-flight</code></li>\n<li><code class=\"language-text\">success</code></li>\n<li><code class=\"language-text\">error</code></li>\n</ul>\n<p>The <code class=\"language-text\">idle</code> network request state is the default (and ending) phase for a network request. During the <code class=\"language-text\">loading</code> phase, the client <a href=\"https://docs.oracle.com/cd/E19683-01/806-4075/ipov-100/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">waits for acknowledgment and packets from the server</a>, then transitions into either the <code class=\"language-text\">success</code> or <code class=\"language-text\">error</code> state.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_85DE2ABDC113039EBC05E47036199F81CC95206C0580047953B5BBC8BED537D0_1629174515717_image.png\" alt=\"Network state transitions\"></p>\n<h2 id=\"localizing-network-requests-using-custom-react-hooks\" style=\"position:relative;\"><a href=\"#localizing-network-requests-using-custom-react-hooks\" aria-label=\"localizing network requests using custom react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Localizing network requests using custom React Hooks</h2>\n<p>To keep network requests testable and decoupled from business logic, it’s best to manage requests with custom Hooks. This keeps your code lean and makes it easy to perform special one-off operations like data transformations on network responses.</p>\n<p>For example, a request to fetch a list of blog posts can be kept in a <code class=\"language-text\">usePostsQuery</code> custom Hook, just like the one below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useState, useEffect } from 'react'\n\nconst api = {\n  GET: async (url) => {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  }\n}\n\nexport default function usePostsQuery() {\n  const [error, setError] = useState()\n  const [status, setStatus] = useState('idle')\n  const [data, setData] =useState()\n\n  const startFetch = async () => {\n    try {\n      let data = await api.GET('/posts')\n\n      setError()\n      setStatus('success')\n      setData(data)\n    } catch (error) {\n      setError(error)\n      setStatus('error')\n    }\n  }\n\n  useEffect(() => {\n    startFetch()\n  }, []);\n\n  return {\n    data,\n    error,\n    isSuccess: status === 'success',\n    isError: status === 'error'\n    refetch: startFetch\n  }\n}</code></pre></div>\n<p>This hook can be made even more concise <a href=\"https://blog.logrocket.com/building-multi-step-wizards-with-formik-and-react-query/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">by leveraging React Query</a> (my preferred tool):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useQuery } from \"react-query\";\n\nexport default function usePostsQuery() {\n  return useQuery(\"posts\", () =>\n    api.GET(\"/posts\")\n  );\n}</code></pre></div>\n<h2 id=\"creating-the-project\" style=\"position:relative;\"><a href=\"#creating-the-project\" aria-label=\"creating the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating the project</h2>\n<p>Let’s build a small app called <code class=\"language-text\">Betflix</code>, <a href=\"https://betflix.netlify.app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">which you can</a> <a href=\"https://betflix.netlify.app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">b</a>oth <a href=\"https://betflix.netlify.app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visit</a> and <a href=\"https://github.com/creatrixity/betflix\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">clone</a>. This app will allow friends to choose sports teams from a set of fixtures and make predictions.</p>\n<blockquote>\n<p><strong>Note:</strong> For the sake of brevity, I’ll skip explaining the more mundane components used in this proof-of-concept. You are welcome to explore the <a href=\"https://github.com/creatrixity/betflix/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">entire code for this</a>.</p>\n</blockquote>\n<p><img src=\"https://paper-attachments.dropbox.com/s_85DE2ABDC113039EBC05E47036199F81CC95206C0580047953B5BBC8BED537D0_1629175043196_image.png\"></p>\n<p>First of all, we’ll create a new React project and start the development server:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx create-react-app betflix\ncd betflix\nnpm start</code></pre></div>\n<p>We need to install dependencies for HTTP requests, a serverless function proxying, and a managed database (to keep fixtures and other records).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react-query react-toast-notifications http-proxy-middleware @supabase/supabase-js --save</code></pre></div>\n<p>I’ll also include Netlify Lambda and CLI as development dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install netlify-lambda netlify -D</code></pre></div>\n<p>By the time we are done, you should have a directory structure like the one below.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_85DE2ABDC113039EBC05E47036199F81CC95206C0580047953B5BBC8BED537D0_1629176629285_image.png\"></p>\n<h2 id=\"displaying-the-fixtures-list-with-custom-react-hooks\" style=\"position:relative;\"><a href=\"#displaying-the-fixtures-list-with-custom-react-hooks\" aria-label=\"displaying the fixtures list with custom react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Displaying the fixtures list with custom React Hooks</h2>\n<p>We’ll update the <code class=\"language-text\">&lt;App /></code> component to display a list of fixtures fetched from the serverless backend. We’ll be creating and handling requests for a list of bets and a list of fixtures in a sequential fashion.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import \"./App.css\";\n\nimport Fixture from \"./components/Fixture\";\nimport Loader from \"./components/Loader\";\n\nimport useBetsQuery from \"./hooks/queries/useBetsQuery\";\nimport useFixturesQuery from \"./hooks/queries/useFixturesQuery\";\n\nfunction App() {\n  const { data, isLoading, isError } = useFixturesQuery();\n  const {\n    data: bets,\n    isLoading: betsLoading,\n    isError: betsErrored,\n  } = useBetsQuery();\n\n  if (isLoading || betsLoading) return &lt;Loader />;\n  if (isError || betsErrored)\n    return &lt;p>We encountered an error fetching data&lt;/p>;\n\n  const sortFixtures = (fixtureA, fixtureB) => {\n    return (\n      bets.hasOwnProperty(fixtureB.fixture.id) -\n        bets.hasOwnProperty(fixtureA.fixture.id) ||\n      fixtureB.fixture.status.elapsed - fixtureA.fixture.status.elapsed\n    );\n  };\n\n  return (\n    &lt;div className=\"App\">\n      &lt;header className=\"App-header\">\n        &lt;h1 className=\"App-header__title\">Upcoming fixtures&lt;/h1>\n      &lt;/header>\n      &lt;section className=\"Fixtures\">\n        {data.results.response.length ? (\n          &lt;>\n            {data.results.response\n              .sort(sortFixtures)\n              .map(({ fixture, teams: { away, home } }) => (\n                &lt;Fixture\n                  key={fixture.id}\n                  fixture={fixture}\n                  away={away}\n                  home={home}\n                  isBetPlaced={bets.hasOwnProperty(fixture.id)}\n                  defaultSelectedTeam={bets[fixture.id].choice}\n                  defaultAmount={bets[fixture.id].amount}\n                />\n              ))}\n          &lt;/>\n        ) : (\n          &lt;div>No fixtures at the moment&lt;/div>\n        )}\n      &lt;/section>\n    &lt;/div>\n  );\n}\n\nexport default App;</code></pre></div>\n<p>From the code above, we have declared dependencies on <code class=\"language-text\">useBetsQuery</code> and <code class=\"language-text\">useFixturesQuery</code>, so we’ll now define them.</p>\n<p><code class=\"language-text\">useBetsQuery</code> is a custom hook used to fetch and transform a list of bets into a map of keyed objects that we can use to track the bet status of a fixture.</p>\n<p>Let’s create <code class=\"language-text\">useBetsQuery.js</code> in <code class=\"language-text\">/src/hooks/queries</code> and update it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useQuery } from \"react-query\";\n\nconst ENDPOINT = \"/.netlify/functions/fetchBets\";\n\n// Normalize the bets payload into a keyed map with `fixture_id` as the key\nfunction normalizeBets(betsList) {\n  return betsList.reduce(\n    (acc, curr) => ({\n      ...acc,\n      [curr.fixture_id]: curr,\n    }),\n    {}\n  );\n}\n\n// Because we'll use the fetch API (instead of Axios), we need to explicitly return a\n// Promise when an error occurs so React Query can change the status.\nconst getBets = async (url) => {\n  const response = await fetch(url);\n  const data = await response.json();\n  if (response.ok) {\n    return normalizeBets(data.results);\n  }\n  return Promise.reject(new Error(data.message));\n};\n\nexport default function useBetsQuery() {\n  return useQuery(\"bets\", () => getBets(ENDPOINT));\n}</code></pre></div>\n<p>With that done, we also need to create the custom hook where we’ll be fetching. Create the <code class=\"language-text\">useFixturesQuery.js</code> hook in <code class=\"language-text\">src/hooks/queries</code> and add the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useQuery } from \"react-query\";\n\nconst getFixtures = async (url) => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n};\n\nexport default function useFixturesQuery() {\n  return useQuery(\"fixtures\", () =>\n    getFixtures(\"/.netlify/functions/fetchFixtures\")\n  );\n}</code></pre></div>\n<p>We’re now ready to define the component that will display information about the individual fixture.</p>\n<h2 id=\"creating-the-fixture--component\" style=\"position:relative;\"><a href=\"#creating-the-fixture--component\" aria-label=\"creating the fixture  component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating the <code class=\"language-text\">&lt;Fixture /></code> component</h2>\n<p>We’ll create the <code class=\"language-text\">&lt;Fixture/></code> component in <code class=\"language-text\">src/components/Fixture.js</code> and display information about the home and away teams. We also introduce two new React Hooks, the <code class=\"language-text\">useMutationNotification</code> and <code class=\"language-text\">usePlaceBetMutation</code> Hooks.</p>\n<p><code class=\"language-text\">useMutationNotification</code> is an interesting custom hook that allows us to handle network state changes in a predictable ergonomic manner so we can provide feedback on user-initiated actions straight away.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useEffect, useState } from \"react\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { ReactComponent as ArrowLeft } from \"../assets/svg/arrowLeft.svg\";\nimport { ReactComponent as ChevronRight } from \"../assets/svg/chevronRight.svg\";\nimport TeamCard from \"./TeamCard\";\nimport FormInput from \"./FormInput\";\nimport useMutationNotification from \"../hooks/useMutationNotification\";\nimport usePlaceBetMutation from \"../hooks/queries/usePlaceBetMutation\";\nimport Loader from \"./Loader\";\n\nfunction Fixture({\n  fixture,\n  away,\n  home,\n  isBetPlaced,\n  defaultAmount,\n  defaultSelectedTeam,\n}) {\n  const [amount, setAmount] = useState(defaultAmount || 0);\n  const [selectedTeam, setSelectedTeam] = useState(defaultSelectedTeam);\n  const [betPlaced, setBetPlaced] = useState(isBetPlaced);\n  const { addToast } = useToasts();\n  const [doPlaceBetRequest, placeBetState] = usePlaceBetMutation();\n\n  useMutationNotification({\n    ...placeBetState,\n    useServerMessage: false,\n    entity: \"bet\",\n    actionType: \"place\",\n  });\n  useEffect(() => {\n    if (placeBetState.isSuccess) setBetPlaced(true);\n  }, [placeBetState.isSuccess]);\n  const teams = {\n    away,\n    home,\n  };\n\n  const status = !fixture.status.elapsed ? \"Up next\" : \"In progress\";\n\n  const doAmountUpdate = (e) => setAmount(e.target.value);\n  const doTeamUpdate = (team) => {\n    if (betPlaced) return;\n    setSelectedTeam(team);\n  };\n  const doPlaceBet = () => {\n    if (!selectedTeam || amount &lt;= 0) {\n      addToast(\"Please select a team and add an amount\", {\n        appearance: \"info\",\n        autoDismiss: true,\n      });\n      return;\n    }\n    doPlaceBetRequest({\n      amount,\n      choice: selectedTeam,\n      fixture_id: fixture.id,\n    });\n  };\n\n  return (\n    &lt;div className=\"Fixture\">\n      &lt;section className=\"Fixture__teams\">\n        &lt;TeamCard\n          name={home.name}\n          logo={home.logo}\n          id={home.id}\n          type={\"home\"}\n          selected={selectedTeam === \"home\"}\n          onTeamChange={doTeamUpdate}\n        />\n        &lt;div className=\"Fixture__separator\">vs&lt;/div>\n        &lt;TeamCard\n          name={away.name}\n          logo={away.logo}\n          id={away.id}\n          type={\"away\"}\n          selected={selectedTeam === \"away\"}\n          onTeamChange={doTeamUpdate}\n        />\n      &lt;/section>\n\n      {!betPlaced ? (\n        &lt;>\n          &lt;section className=\"Fixture__controls\">\n            &lt;div className=\"Fixture__control\">\n              &lt;FormInput\n                label={\"Amount\"}\n                name={`amount-${fixture.id}`}\n                type=\"number\"\n                value={amount}\n                onChange={doAmountUpdate}\n              />\n            &lt;/div>\n            &lt;div className=\"Fixture__controls__separator\">\n              &lt;ArrowLeft />\n            &lt;/div>\n            &lt;div className=\"Fixture__control\">\n              &lt;FormInput\n                label={\"Potential Winnings\"}\n                name={`potential-winnings-${fixture.id}`}\n                value={amount * 2 || 0}\n                disabled\n              />\n            &lt;/div>\n          &lt;/section>\n          &lt;section className=\"Fixture__footer\">\n            &lt;div className=\"Fixture__status\">\n              &lt;span className=\"Fixture__status__dot\">&lt;/span>\n              {status}\n            &lt;/div>\n            {!placeBetState.isLoading ? (\n              &lt;button className=\"Button\" onClick={doPlaceBet}>\n                Place bet &lt;ChevronRight />\n              &lt;/button>\n            ) : (\n              &lt;Loader />\n            )}\n          &lt;/section>\n        &lt;/>\n      ) : (\n        &lt;section className=\"Fixture__controls\">\n          &lt;p>\n            You placed a &lt;b>${amount}&lt;/b> bet on{\" \"}\n            &lt;b className=\"u-text-primary\">{teams[selectedTeam]?.name}&lt;/b> to\n            potentially win &lt;b className=\"u-text-primary\">${amount * 2}&lt;/b>\n          &lt;/p>\n        &lt;/section>\n      )}\n    &lt;/div>\n  );\n}\n\nFixture.defaultProps = {\n  isBetPlaced: false,\n};\n\nexport default Fixture;</code></pre></div>\n<p>In the code above, we declared dependencies on a few Hooks.</p>\n<p><code class=\"language-text\">useMutationNotification</code> will accept the network request status options (<code class=\"language-text\">isError</code> and <code class=\"language-text\">isSuccess</code>) and will allow us to either show the error message from the server (if we set <code class=\"language-text\">useServerMessage</code> to <code class=\"language-text\">true</code>) or pass <code class=\"language-text\">entity</code> and <code class=\"language-text\">actionType</code> strings in to provide a generic message to the user.</p>\n<p>Let’s create <code class=\"language-text\">useMutationNotification.js</code> in <code class=\"language-text\">src/hooks</code> and update it with the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useEffect, useState } from \"react\";\nimport useShowToast from \"./useShowToast\";\n\nfunction capFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction useMutationNotification({\n  isError,\n  isSuccess,\n  actionType = \"create\",\n  entity,\n  data,\n  error,\n  useServerMessage = true,\n}) {\n  const [notificationConfig, setNotificationConfig] = useState(null);\n  const showToast = useShowToast();\n\n  useEffect(() => {\n    if (isError) {\n      setNotificationConfig({\n        type: \"error\",\n        message: useServerMessage\n          ? error.message\n          : `${entity} could not be ${actionType}d`,\n      });\n    }\n  }, [\n    useServerMessage,\n    isError,\n    setNotificationConfig,\n    entity,\n    actionType,\n    error,\n  ]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      setNotificationConfig({\n        type: \"success\",\n        message: useServerMessage\n          ? data.message\n          : `${entity} successfully ${actionType}d`,\n      });\n    }\n  }, [\n    useServerMessage,\n    isSuccess,\n    setNotificationConfig,\n    entity,\n    actionType,\n    data,\n  ]);\n\n  useEffect(() => {\n    if (notificationConfig) {\n      const { type, message } = notificationConfig;\n      showToast({ type, message: capFirst(message) });\n    }\n  }, [notificationConfig, showToast]);\n}\n\nexport default useMutationNotification;</code></pre></div>\n<p>We’ll then define the <code class=\"language-text\">usePlaceBet</code> mutation we intend to use in placing the bet. We’ll return the mutation action and its state. Create <code class=\"language-text\">usePlaceBetMutation</code> in <code class=\"language-text\">src/hooks/queries</code> and update it to the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useMutation } from \"react-query\";\n\nconst ENDPOINT = \"/.netlify/functions/placeBet\";\n\nexport default function usePlaceBetMutation() {\n  const request = async (payload) => {\n    const res = await fetch(ENDPOINT, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    });\n    const data = await res.json();\n    if (!res.ok) return Promise.reject(new Error(data.message));\n    return data;\n  };\n  const { mutate, ...mutationState } = useMutation(request);\n  return [mutate, mutationState];\n}</code></pre></div>\n<p>With these updates made, we can now handle network state changes for mutations in simple, easy-to-read fashion.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_85DE2ABDC113039EBC05E47036199F81CC95206C0580047953B5BBC8BED537D0_1629263021132_image.png\"></p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Reacting to network state changes can be challenging, but it’s also a massive opportunity to provide users with a much more meaningful experience.</p>\n<p>You can check out the <a href=\"https://react-query.tanstack.com/quick-start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Query</a> documentation to learn more about enhancing the network state experience for your users when building React applications. You can find the full source code for this demo proof-of-concept on <a href=\"https://github.com/creatrixity/betflix\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git</a><a href=\"https://github.com/creatrixity/betflix\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">H</a><a href=\"https://github.com/creatrixity/betflix\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ub</a>.</p>","fields":{"slug":"/posts/improve-async-network-state-handling-with-custom-react-hooks","tagSlugs":["/tag/java-script/","/tag/react/","/tag/react-query/"]},"frontmatter":{"date":"2021-08-24T18:26:00.121Z","description":"In this article, I’ll cover the various states that network requests exist in and show you how to keep request management within custom Hooks. I’ll also walk you through building a small app that employs these Hooks.","tags":["JavaScript","React","React-Query"],"title":"Improve async network state handling with custom React Hooks","socialImage":"https://paper-attachments.dropbox.com/s_85DE2ABDC113039EBC05E47036199F81CC95206C0580047953B5BBC8BED537D0_1629174515717_image.png"}}},"pageContext":{"slug":"/posts/improve-async-network-state-handling-with-custom-react-hooks"}},"staticQueryHashes":["251939775","401334301","4120999787"]}