{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/pt-1-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/","result":{"data":{"markdownRemark":{"id":"db8bdb97-1daa-5a34-a300-dfb391455ce8","html":"<p>As web/mobile application developers and software creators, we are always on the lookout for ways we can improve the performance and quality of the experience of the solutions we architect. On the web, we can enhance the performance of our application as regards loading time by minimizing the number of HTTP requests we make for critical assets. If we can reduce the number of requests for CSS and JavaScript assets our application makes, we get improved load times.</p>\n<p><img src=\"https://steemitimages.com/DQmPTqkegY4dLq8B5Mk5uWaEVrGZeW28PuBqxvYHzBnu7WT/Browser-Trip.png\" alt=\"The Page Trip\"></p>\n<p>We’ll be looking at reducing the total amount of requests for CSS and JavaScript in our app to a maximum of two requests. How do we accomplish this feat? We’ll be leveraging the following techniques:</p>\n<ol>\n<li>CSS-in-JS with <a href=\"http://styled-components.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Components</a></li>\n<li>Code splitting and lazy loading with <a href=\"http://webpack.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack</a>.</li>\n</ol>\n<p>Let’s dive in. We’ll be building the user interface for a Hip Hop quotes application called FireLiners with React. We’ll be leveraging the <a href=\"https://www.styled-components.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Components CSS-in-JS library</a> alongside <a href=\"https://github.com/jxnblk/styled-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Systems</a>. We’ll also be leveraging the <a href=\"https://pricelinelabs.github.io/design-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Priceline One Design System</a> as the base for our user interface.</p>\n<h4 id=\"difficulty\" style=\"position:relative;\"><a href=\"#difficulty\" aria-label=\"difficulty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Difficulty</h4>\n<ul>\n<li>Intermediate</li>\n</ul>\n<h4 id=\"what-will-i-learn\" style=\"position:relative;\"><a href=\"#what-will-i-learn\" aria-label=\"what will i learn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Will I Learn?</h4>\n<p>At the end of this tutorial, we should have attained sufficient mastery of performance optimization techniques as concerns asset loading. We’ll also understand the construction of user interfaces with the Styled Components library and Styled Systems. We’ll cover the following concepts. We’ll then proceed to build a web application utilizing the knowledge we’ve garnered so far.</p>\n<ul>\n<li>Understanding the CSS-in-JS paradigm and its implications for performance.</li>\n<li>Harnessing Styled Components for Rapid Development.</li>\n<li>Code Splitting and Route Based Loading with Webpack.</li>\n</ul>\n<h4 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h4>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> 8.0 or greater.</li>\n<li><a href=\"https://npmjs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM</a> 3.0 or greater.</li>\n<li><a href=\"https://yarnpkg.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn</a> package manager</li>\n<li><a href=\"https://github.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git</a></li>\n<li>An intermediate level of <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactJS</a> knowledge.</li>\n<li>Keen interest and patience.</li>\n</ul>\n<h4 id=\"introduction-to-css-in-js\" style=\"position:relative;\"><a href=\"#introduction-to-css-in-js\" aria-label=\"introduction to css in js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction to CSS-in-JS.</h4>\n<p>We’ll be breaking down a couple of concepts to gain a proper head start on our task.</p>\n<ul>\n<li><strong>What is CSS-in-JS?</strong></li>\n</ul>\n<p>CSS-in-JS is a technique that utilizes JavaScript as the technology for generating styles. These styles may be occur inline (i.e within the <code class=\"language-text\">style</code> attribute of a DOM element) or may be extracted into a <code class=\"language-text\">style</code> element injected at the head. CSS-in-JS may also be leveraged by NodeJS servers to generate styles for the application using SSR (Server Side Rendering)</p>\n<p><strong>Why Should I Use CSS-in-JS?</strong></p>\n<p>CSS-in-JS has multiple benefits for your app’s end users and for your development experience. We’ll be exploring a few benefits. CSS-in-JS can help you:</p>\n<ol>\n<li><strong>Maintain a Singular Development Context</strong>: With CSS-in-JS, you can step out of incessant context switches thanks to the maintenance of a single development context. You no longer need to switch between SASS, Stylus and LESS files when building applications. You get to write all your code in one easily accessible place.</li>\n<li><strong>Eliminate Styling Fragmentation:</strong> CSS-in-JS allows you to freely write styles without worrying about compatibility with other styling preprocessors as all your code is available and can be used in any environment where JavaScript is ran.</li>\n<li><strong>Keep HTTP Requests Minimal</strong>: Multiple HTTP requests are usually the chief culprits to blame for poor load times. Loading multiple assets can interfere with paint times and other browser processes. We can keep the number of HTTP requests issued for assets low by utilizing CSS-in-JS.</li>\n<li><strong>Leverage the Full Power of JavaScript</strong>: CSS-in-JS allows us to leverage all the capabilities of JavaScript when writing code. We are able to take advantage of native JavaScript features like the <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code> and <code class=\"language-text\">reduce</code> within our CSS. For instance, we could write styles that only apply within a certain time range by leveraging the <code class=\"language-text\">Date</code> class in JavaScript.</li>\n</ol>\n<p><strong>How Do I Get Started With CSS-in-JS</strong></p>\n<p>Multiple CSS-in-JS solutions exist at the moment. The most popular solutions at the moment are <a href=\"http://styled-components.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Components</a>, <a href=\"https://emotion.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Emotion</a>, <a href=\"http://glamorous.github.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Glamorous</a> and <a href=\"http://github.com/khan-academy/aphrodite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aphrodite</a>. We’ll be using the Styled Components library for the duration of this tutorial but other solutions use a similar API to Styled Components.</p>\n<h4 id=\"code-splitting-in-webpack\" style=\"position:relative;\"><a href=\"#code-splitting-in-webpack\" aria-label=\"code splitting in webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code Splitting in Webpack</h4>\n<p>Webpack is the module bundler of choice for JavaScript developers around the world. Webpack is used to compile JavaScript modules. Once you’ve installed Webpack, you can interface with Webpack either through its CLI or API. You can <a href=\"https://webpack.js.org/guides/getting-started/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">learn more about Webpack here</a></p>\n<p>Webpack comes loaded with many valuable tools. One of the tools we’ll be harnessing is the code-splitting functionality. Code splitting allows us to separate our code into multiple chunks that can be loaded in parallel. The most common usage for code splitting is the splitting of a monolithic code base into a ‘main bundle’ and a ‘commons bundle’. The commons bundle contains code that is required for the whole application to run. This code can be separated from the man bundle and cached while in production as this code rarely needs to be updated. Special optimizations like minification should be run on this bundle as it tends to be huge for most use cases.</p>\n<h3 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h3>\n<p>Let’s install the <code class=\"language-text\">create-react-app</code> application scaffold. This will help us generate a minimal, non-opinionated React application.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -g create-react-app</code></pre></div>\n<p>Let’s create a project we’ll be calling <em>fire-liners</em>. We can do this by</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">create-react-app fire-liners &amp;&amp; cd fire-liners</code></pre></div>\n<p>Since <code class=\"language-text\">create-react-app</code> assumes some default configurations, to gain better control over the setup, we’ll eject all the config scripts to the root of the application.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run eject -y</code></pre></div>\n<p>With all our config files ejected, our structure should resemble the below now:</p>\n<ul>\n<li>\n<p><strong>fire-liners/</strong></p>\n<ul>\n<li><strong>config/</strong></li>\n<li>jest/</li>\n<li>env.js</li>\n<li>polyfills.js</li>\n<li>webpack.config.dev.js</li>\n<li>webpack.config.prod.js</li>\n<li>webpackDevServer.config.js</li>\n<li><strong>node_modules/</strong></li>\n<li><strong>public/</strong></li>\n<li>favicon.ico</li>\n<li>index.html\n+manifest.json</li>\n<li><strong>scripts/</strong></li>\n<li>build.js</li>\n<li>start.js</li>\n<li>test.js</li>\n<li><strong>src/</strong></li>\n<li>App.css </li>\n<li>App.js </li>\n<li>App.test.js </li>\n<li>index.css </li>\n<li>index.js </li>\n<li>logo.svg </li>\n<li>registerServiceWorker.js</li>\n<li>package.json</li>\n</ul>\n</li>\n</ul>\n<p>For brevity and ease of understanding, we’ll not be using any state management libraries like Redux, Saga or MobX. Let’s get <code class=\"language-text\">fire-liners</code> running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm start</code></pre></div>\n<p>This will spin up <code class=\"language-text\">http://localhost:3001</code> on your local browser. We get the default screen below.</p>\n<p><img src=\"https://steemitimages.com/DQmTTGq7HqrSdybSGoPHQNqD9Sc2dPhWbcc4bYCFnABKGLx/react-splash.png\" alt=\"Create React App default screen\"></p>\n<p>If we peer into the source code with <code class=\"language-text\">Ctrl + U</code> in the browser window, we should notice the below</p>\n<p><img src=\"https://steemitimages.com/DQmSqfqwu9vWuC8Eq9SduiTH5BjT4EuGLsYwhj44KeUeBkt/source-code.png\" alt=\"FireLiners Source Code Shot\"></p>\n<p>This clearly shows that all our code is going into one giant <code class=\"language-text\">bundle.js</code> module. We’d like to harness Webpack code splitting to achieve <code class=\"language-text\">app.bundle.js</code> and <code class=\"language-text\">vendor.bundle.js</code> bundles. To do this, we’ll be using the <a href=\"https://webpack.js.org/plugins/commons-chunk-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack Common Chunks plugin</a> and tweaking our configuration a little.</p>\n<p>Let’s head over to <code class=\"language-text\">config/webpack.config.dev.js</code> and add the Webpack Common Chunks plugin to the end of the <code class=\"language-text\">plugins</code> array available in the <code class=\"language-text\">module</code> property. Our initialization options includes the name we’ll call the common chunks we’re extracting out of the main bundle, we’ll call this file <code class=\"language-text\">vendor.bundle.js</code>. We’ll only create this file if we have more than two shared chunks in the main bundle.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>CommonsChunkPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"vendor\"</span><span class=\"token punctuation\">,</span>\n        filename<span class=\"token operator\">:</span> <span class=\"token string\">\"vendor.bundle.js\"</span><span class=\"token punctuation\">,</span>\n        minChunks<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Next, we’ll take a look at the <code class=\"language-text\">entry</code> property. It is structured like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// We ship a few polyfills by default:</span>\n    require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./polyfills'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    paths<span class=\"token punctuation\">.</span>appIndexJs<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Our Common Chunks plugin expects all vendor code to be available in the <code class=\"language-text\">entry</code> with the “vendor” property. Let’s adjust the <code class=\"language-text\">entry</code> property to the resemble the code below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"vendor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// We ship a few polyfills by default:</span>\n        require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./polyfills'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dev-utils/webpackHotDevClient'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Finally, this is your app's code:</span>\n    <span class=\"token string\">\"app\"</span><span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span>appIndexJs<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Here we are specifying all the libraries we’d like to move to the <code class=\"language-text\">vendor.bundle.js</code> in the <code class=\"language-text\">vendor</code> array.</p>\n<p>Finally, we need to modify the <code class=\"language-text\">filename</code> property in the <code class=\"language-text\">output</code> object to output the “bundle” suffix.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    filename<span class=\"token operator\">:</span> <span class=\"token string\">'static/js/[name].bundle.js'</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>With that done, we run <code class=\"language-text\">npm start</code> and we get a result like below.</p>\n<p><img src=\"https://steemitimages.com/DQmT8NekwkSdX45p2xTeMk8ZsquikGm75JYG1dsE5zKavNx/source-code-vendor.png\" alt=\"Source Code with Vendor Code\"></p>\n<p>Look at that! We now have two bundles, our <code class=\"language-text\">app.bundle.js</code> and our <code class=\"language-text\">vendor.bundle.js</code> modules. We’ll now proceed to getting our app CSS-in-JS ready.</p>\n<h4 id=\"getting-started-with-css-in-js\" style=\"position:relative;\"><a href=\"#getting-started-with-css-in-js\" aria-label=\"getting started with css in js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started with CSS-in-JS.</h4>\n<p>We’ll now setup CSS-in-JS capabilities for our app. To do this, we’ll need to install the following:</p>\n<ul>\n<li><strong><a href=\"https://github.com/styled-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Components</a></strong>: This library will help us turn strings or objects to valid CSS. It also helps us properly scope our CSS classes to avoid namespace pollution and style clashes.</li>\n<li><strong><a href=\"https://github.com/jxnblk/styled-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Systems</a></strong>: This helps us setup some sensible defaults for spacing, colors and also provide us with some very useful primitive styled components like <code class=\"language-text\">&lt;Box/></code>, <code class=\"language-text\">&lt;Flex/></code> and <code class=\"language-text\">&lt;Input/></code></li>\n<li><strong><a href=\"https://pricelinelabs.github.io/design-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Priceline Design System</a></strong>: Provides us with some more opinionated CSS-in-JS components as a base for our interface.</li>\n</ul>\n<p>We can install these modules by running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i styled-system pcln-design-system styled-components --save</code></pre></div>\n<p>With these installed, we’ll proceed to restructuring our code for better separation of concerns.</p>\n<p>Our new application structure looks like the one below:</p>\n<ul>\n<li>\n<p><strong>fire-liners/</strong></p>\n<ul>\n<li><strong>config/</strong></li>\n<li>jest/</li>\n<li>env.js</li>\n<li>polyfills.js</li>\n<li>webpack.config.dev.js</li>\n<li>webpack.config.prod.js</li>\n<li>webpackDevServer.config.js</li>\n<li><strong>node_modules/</strong></li>\n<li><strong>public/</strong></li>\n<li>favicon.ico</li>\n<li>index.html</li>\n<li>manifest.json</li>\n<li><strong>scripts/</strong></li>\n<li>build.js</li>\n<li>start.js</li>\n<li>test.js</li>\n<li><strong>src/</strong></li>\n<li>components/ </li>\n<li>Header/ </li>\n<li>index.js</li>\n<li>logo.svg</li>\n<li>\n<p>containers/ </p>\n<ul>\n<li>App/</li>\n<li>App.test.js</li>\n<li>index.js</li>\n<li>registerServiceWorker.js</li>\n</ul>\n</li>\n<li>package.json</li>\n</ul>\n</li>\n</ul>\n<p>We’ll have to reflect the changes we made to our application structure within our JavaScript files. In <code class=\"language-text\">src/index.js</code> we change:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.js\"</span></code></pre></div>\n<p>To this one below</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./containers/App\"</span></code></pre></div>\n<p>We’ll create <code class=\"language-text\">index.js</code> at <code class=\"language-text\">src/containers/App</code> and add some code. We’ll start working with styled components and Priceline’s design system. We’ll be displaying a list of quotes by hip hop artists. First of all we’ll import some modules from <code class=\"language-text\">react</code>, <code class=\"language-text\">styled components</code> and <code class=\"language-text\">pcln-design-system</code>. We’ll also import our Header.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Box<span class=\"token punctuation\">,</span>\n  BlockLink<span class=\"token punctuation\">,</span>\n  Flex<span class=\"token punctuation\">,</span>\n  Link<span class=\"token punctuation\">,</span>\n  Text<span class=\"token punctuation\">,</span>\n  ThemeProvider<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pcln-design-system\"</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../components/Header\"</span></code></pre></div>\n<p>We’ll hard code some liners. These will mimic the data we’ll be fetching in subsequent installments from our server.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> liners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token operator\">:</span> <span class=\"token string\">\"Immortal Technique\"</span><span class=\"token punctuation\">,</span>\n    government_name<span class=\"token operator\">:</span> <span class=\"token string\">\"Felipe Andres Coronel\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span>\n      <span class=\"token string\">\"The purpose of life is a life with a purpose. Rather die for what I believe in than live a life that is worthless.\"</span><span class=\"token punctuation\">,</span>\n    photo<span class=\"token operator\">:</span> <span class=\"token string\">\"immortal-technique.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token operator\">:</span> <span class=\"token string\">\"Eminem\"</span><span class=\"token punctuation\">,</span>\n    government_name<span class=\"token operator\">:</span> <span class=\"token string\">\"Marshall Mathers\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token string\">\"I don't rap for dead presidents. I'd rather see the president dead.\"</span><span class=\"token punctuation\">,</span>\n    photo<span class=\"token operator\">:</span> <span class=\"token string\">\"eminem.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token operator\">:</span> <span class=\"token string\">\"Andre 3000\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span>\n      <span class=\"token string\">\"Hell just fell, 3000 more degrees, cooler, but y'all can't measure my worth; and before you do, you'll need a ruler made by all the Greek gods.\"</span><span class=\"token punctuation\">,</span>\n    photo<span class=\"token operator\">:</span> <span class=\"token string\">\"andre-3k.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>We’ll create a <code class=\"language-text\">Circle</code> micro-component to serve as a placeholder for images we’ll load in the future. This circle will extend the Box base (from styled system) and add some niceties like border radius.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Circle <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Box<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border-radius: 100%;\n  width: 60px;\n  height: 60px;\n  display: inline-block;\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Our <code class=\"language-text\">App</code> class will extend React’s component class and in our <code class=\"language-text\">render</code> method, we’ll add some markup. Brace up this will be a little interesting. We’ll be wrapping our code in a <code class=\"language-text\">ThemeProvider</code>. Theme providers allow us to apply specific defaults and theming to our application. We’re wrapping our Header and app code within the <code class=\"language-text\">ThemeProvider</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>header <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next up after our header is our list of liners. We’ll be using the <code class=\"language-text\">Flex</code> component to layout our elements. We’ll also use the <code class=\"language-text\">Box</code> component (the base of the circle component earlier). We’re leveraging responsive width parameters to set the width of the box to 90% at the “small breakpoint”, 80% at “medium” and 60% at “large”. We loop through our liners with <code class=\"language-text\">liners.map(liner => {...})</code> and then we setup some more elements.</p>\n<p>We utilize responsive font sizes in our <code class=\"language-text\">&lt;Text/></code> element to make our font sizes 16px, 24px and 32px respectively at small, medium and large breakpoints.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Flex justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span> alignItems<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Box width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text fontSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> bold<span class=\"token operator\">></span>\n      Recent Quotes\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>liners<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">liner</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>BlockLink href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"/liners/\"</span> <span class=\"token operator\">+</span> liner<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Flex bg<span class=\"token operator\">=</span><span class=\"token string\">\"lightGray\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">\"4px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Flex width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Circle bg<span class=\"token operator\">=</span><span class=\"token string\">\"gray\"</span> mr<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Circle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Flex flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Text mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> italic fontSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>liner<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"/authors/\"</span> <span class=\"token operator\">+</span> liner<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>Text fontSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"gray\"</span> align<span class=\"token operator\">=</span><span class=\"token string\">\"right\"</span> bold<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>liner<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BlockLink<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Next, we’ll work on our Header component. Create an <code class=\"language-text\">index.js</code> file at <code class=\"language-text\">src/components/Header</code> and add some code to it. We will use some Priceline components to get better.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button<span class=\"token punctuation\">,</span> Icon<span class=\"token punctuation\">,</span> IconButton<span class=\"token punctuation\">,</span> Flex<span class=\"token punctuation\">,</span> Link<span class=\"token punctuation\">,</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pcln-design-system\"</span></code></pre></div>\n<p>Next, we’ll define a <code class=\"language-text\">MenuButton</code> component for our header. This will simply display a menu button.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MenuButton</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Flex width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> align<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>IconButton name<span class=\"token operator\">=</span><span class=\"token string\">\"menu\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, we display the brand in the middle of the header. For now, this will just be text.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Brand</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Flex width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span> align<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"http://a.t\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text color<span class=\"token operator\">=</span><span class=\"token string\">\"black\"</span><span class=\"token operator\">></span>FireLiners<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our third header component is a component that simply provides an add line button.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AddLineButton</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Flex width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span> justify<span class=\"token operator\">=</span><span class=\"token string\">\"right\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Button radius<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">15</span><span class=\"token punctuation\">}</span> size<span class=\"token operator\">=</span><span class=\"token string\">\"small\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Flex<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Icon name<span class=\"token operator\">=</span><span class=\"token string\">\"plus\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Text mt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>New<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, we bring them all together in our <code class=\"language-text\">Header</code> class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Flex className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span> bg<span class=\"token operator\">=</span><span class=\"token string\">\"yellow\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Flex width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>MenuButton <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Brand <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>AddLineButton <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Header</code></pre></div>\n<p>Great! Let’s run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm start</code></pre></div>\n<p>…And we should have a screen that looks like the one below.</p>\n<p><img src=\"https://steemitimages.com/DQmWywGeRctskP1jnvNAQmsmQyh44uDRHLKSzot46q8SFgE/fireliners-index.png\" alt=\"FireLiners Index Page\"></p>\n<h4 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h4>\n<p>CSS-in-JS and Webpack code splitting are such powerful tools. Leveraging these technologies, We learned how to build really interesting UI that performs appreciably well with load times by stripping out additional HTTP requests for CSS.</p>\n<p>In our next installment, we’ll explore some more possibilities with Webpack and CSS-in-JS. We’ll look at lazy loaded code as an even more advanced performance technique with Webpack.</p>\n<h4 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h4>\n<ul>\n<li><a href=\"https://github.com/creatrixity/fire-liners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fire Liners Github Repository</a></li>\n<li><a href=\"https://webpack.js.org/guides/code-splitting/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Code Splitting with Webpack</a></li>\n<li><a href=\"https://www.styled-components.com/docs/basics#react-native\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Components Basic</a></li>\n<li><a href=\"https://pricelinelabs.github.io/design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting started with Priceline Design System</a></li>\n</ul>","fields":{"slug":"/posts/pt-1-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/","tagSlugs":["/tag/javascript/","/tag/react/"]},"frontmatter":{"date":"2018-05-16T23:46:37.121Z","description":"As web/mobile application developers and software creators, we are always on the lookout for ways we can improve the performance and quality of the experience of the solutions we architect. On the web, we can enhance the performance of our application as regards loading time by minimizing the number of HTTP requests we make for critical assets. If we can reduce the number of requests for CSS and JavaScript assets our application makes, we get improved load times.","tags":["Javascript","React"],"title":"Pt 1: Build a CSS-in-JS React App with Styled Components and Priceline Design System","socialImage":"https://steemitimages.com/256x512/https://steemitimages.com/DQmWywGeRctskP1jnvNAQmsmQyh44uDRHLKSzot46q8SFgE/fireliners-index.png"}}},"pageContext":{"slug":"/posts/pt-1-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"}},"staticQueryHashes":["251939775","401334301","4120999787"]}