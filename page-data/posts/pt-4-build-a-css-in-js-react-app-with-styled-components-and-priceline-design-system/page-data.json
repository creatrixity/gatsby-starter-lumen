{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/pt-4-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/","result":{"data":{"markdownRemark":{"id":"60327bb4-edd9-5d4c-b5f5-06c6b724eb3f","html":"<p><img src=\"https://preview.ibb.co/ixMvfy/A_Storage_Story.jpg\" alt=\"The Storage Story\"></p>\n<h4 id=\"repository\" style=\"position:relative;\"><a href=\"#repository\" aria-label=\"repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repository</h4>\n<ul>\n<li><a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Github Page</a></li>\n</ul>\n<p>Previously on this series, we learned more about state management in large applications and the benefits we could gain by adopting an architecture like Flux. We also add Redux application functionality to our FireLiners app complete with actions and Sagas.</p>\n<p>Today, we’ll do just a little bit more. We’ll be going in-depth into more state management practices and we’ll setup dynamic data that we’ll be using to populate our feed. Finally, we’ll add functionality that allows us to persist our state to local storage.</p>\n<h4 id=\"difficulty\" style=\"position:relative;\"><a href=\"#difficulty\" aria-label=\"difficulty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Difficulty</h4>\n<ul>\n<li>Advanced</li>\n</ul>\n<h4 id=\"what-will-i-learn\" style=\"position:relative;\"><a href=\"#what-will-i-learn\" aria-label=\"what will i learn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Will I Learn?</h4>\n<p>By the time we get to the end of this tutorial, you should have understood the following concepts:</p>\n<ul>\n<li>Working with forms in a Redux-Saga application.</li>\n<li>Updating immutable records with sagas.</li>\n<li>Keeping client data easily accessible by persisting to LocalStorage with <code class=\"language-text\">redux-localstorage-middleware</code>.</li>\n<li>Dynamically transitioning to any view within our React application.</li>\n</ul>\n<h4 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h4>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> 8.0 or greater.</li>\n<li><a href=\"https://npmjs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM</a> 3.0 or greater.</li>\n<li><a href=\"https://yarnpkg.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn</a> package manager</li>\n<li><a href=\"https://github.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git</a></li>\n<li><a href=\"https://github.com/creatrixity/fireliners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Previous code on this series</a></li>\n<li>An intermediate level of <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactJS</a> knowledge.</li>\n<li>Keen interest and patience.</li>\n</ul>\n<h4 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h4>\n<p>Welcome back, friend! Last time around, we did a lot of awesome stuff. This time around, we’ll be up to even much more. Before we proceed any further, let’s remember our current project structure.</p>\n<ul>\n<li>\n<p><strong>fire-liners/</strong></p>\n<ul>\n<li>config/…</li>\n<li>node_modules/…</li>\n<li>public/…</li>\n<li>scripts/…</li>\n<li><strong>src/</strong></li>\n<li>\n<p>components/</p>\n<ul>\n<li>Header/</li>\n<li>index.js</li>\n<li>logo.svg</li>\n</ul>\n</li>\n<li>\n<p>containers/</p>\n<ul>\n<li>App/</li>\n<li>App.test.js</li>\n<li>index.js</li>\n<li>constants.js</li>\n<li>reducer.js</li>\n</ul>\n</li>\n<li>\n<p>screens/</p>\n<ul>\n<li>Home /</li>\n<li>index.js</li>\n<li>constants.js</li>\n<li>actions.js</li>\n<li>Loading /</li>\n<li>index.js</li>\n</ul>\n</li>\n<li>services/ + DataService/ + index.js\n+index.js</li>\n<li>registerServiceWorker.js</li>\n<li>package.json</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.kaymathew.com/posts/pt-3-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Last time around</a> we explored many new ideas about state management. We talked about actions, action dispatchers, sagas and a whole lot of new ideas. We also setup our app to start using those concepts. Today, we’ll continue applying our knowledge to our application. We’ll be adding functionality that allows the creation of new quotes. We’ll be visually highlighting the latest quote and we’ll also explore local storage as a viable store for our application (for now).</p>\n<p><img src=\"https://preview.ibb.co/ixMvfy/A_Storage_Story.jpg\" alt=\"The Storage Story\"></p>\n<h3 id=\"adding-new-liner-entries-efficiently\" style=\"position:relative;\"><a href=\"#adding-new-liner-entries-efficiently\" aria-label=\"adding new liner entries efficiently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding New Liner Entries Efficiently.</h3>\n<p>Let’s get straight to it. We’ll be adding functionality to the form available at <code class=\"language-text\">/add</code>. We’ll also be working on multiple form inputs. Let’s create <code class=\"language-text\">src/screens/AddLine/index.js</code> (if you are yet to do so) and get to work. We’ll be importing our dependencies for this module. We’ll start off by importing React and it’s <code class=\"language-text\">Component</code> subclass. We’ll also be using the <code class=\"language-text\">connect</code> method from <code class=\"language-text\">react-redux</code> to add our store state and dispatch methods to the <code class=\"language-text\">this.props</code> property. We’ll also use the <code class=\"language-text\">Box</code>, <code class=\"language-text\">Flex</code>, <code class=\"language-text\">Label</code>, <code class=\"language-text\">Select</code>, <code class=\"language-text\">RedButton</code> and <code class=\"language-text\">Text</code> Priceline components to construct our UI. We’ll import the <code class=\"language-text\">addLiner</code> method from <code class=\"language-text\">src/containers/Home/actions.js</code> (which we’ll soon create) as it will help us add a new “liner” (or quote, if you prefer) to the store. Finally, we also import the <code class=\"language-text\">getAppState</code> method from the <code class=\"language-text\">reducer.js</code> file at <code class=\"language-text\">src/containers/App</code> to help us retrieve the current application state and make it available to this module.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box<span class=\"token punctuation\">,</span> Flex<span class=\"token punctuation\">,</span> Label<span class=\"token punctuation\">,</span> Select<span class=\"token punctuation\">,</span> RedButton<span class=\"token punctuation\">,</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pcln-design-system\"</span>\n<span class=\"token keyword\">import</span> Textarea <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../components/Form/Textarea\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> addLiner <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../Home/actions\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getAppState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../containers/App/reducer\"</span></code></pre></div>\n<p>Next, we’ll be adding some code to our <code class=\"language-text\">AddLiner</code> class. We’ll add a constructor to the class. Within our constructor, we’ll first follow a common React practice and inherit from React’s <code class=\"language-text\">Component</code> constructor by calling the <code class=\"language-text\">super</code> method with any provided <code class=\"language-text\">props</code> as the argument. We’ll also be making the <code class=\"language-text\">this.handleSubmit</code> method accessible throughout our class. We then set a default state for our <code class=\"language-text\">AddLine</code> component. You may ask, <em>“I thought we were supposed to use Redux for state? Why are we then setting state in this component?”</em> Well, simply because we use Redux doesn’t mean we can’t use regular state management. We use regular state management for state that is supposed to remain <em>private</em>. For instance, we have two fields:</p>\n<ul>\n<li>A Select field with a list of authors we can use for any given quote.</li>\n<li>A Textbox where we can add the quote.</li>\n</ul>\n<p>We’ll save them into the component’s state and later, we’ll send them to the store. We are setting a default quote just to keep things from getting boring.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AddLine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            author<span class=\"token operator\">:</span> <span class=\"token string\">'Immortal Technique'</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token operator\">:</span> <span class=\"token string\">'This is the point from which, I die or succeed; Living the struggle, I know I'</span>m alive when <span class=\"token constant\">I</span> bleed<span class=\"token punctuation\">.</span>'\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, in our class, we’ll add a render method. We’d like to render a select box pre-filled with a list of authors within our form. To do this, we must first go through an array of authors and we’ll create an <code class=\"language-text\">&lt;option>&lt;/option></code> element for each author. We can do this by calling the <code class=\"language-text\">map</code> method on <code class=\"language-text\">this.props.author</code> (undefined at the moment).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> authors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span> author<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we construct a little UI with the Priceline Design System Components. We create a form and we assign the <code class=\"language-text\">this.handleSubmit</code> method as its submit event handler. We also assign an inline handler method to the onChange method of the <code class=\"language-text\">&lt;Select/></code> component that simply sets the <code class=\"language-text\">author</code> state value to the selected author. We also make sure the select box selects an author by default. We do this by mapping the <code class=\"language-text\">value</code> attribute to the <code class=\"language-text\">this.state.value</code> option. We also set the <code class=\"language-text\">state.body</code> property to a new value anytime the value of the Text box changes. Finally, we show a pretty red button that triggers the submit action.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Flex mt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span> alignItems<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Flex flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text bold mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> fontSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Add<span class=\"token punctuation\">.</span> The Dopest Lines<span class=\"token punctuation\">.</span> Ever<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Box mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Flex flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Label mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Author<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Select\n              onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  author<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span>\n              placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Which cat dropped this line?\"</span>\n              value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>authors<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Select<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n\n          <span class=\"token operator\">&lt;</span>Flex flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Label mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Lyrics<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Textarea\n              rows<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span>\n              value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">}</span>\n              onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                  body<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span>\n              placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Spit that line here, dawg...\"</span>\n            <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Textarea<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n\n          <span class=\"token operator\">&lt;</span>RedButton type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Save and go back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RedButton<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>With our render method done, we simply need to create the submit event handler. We use <code class=\"language-text\">e.preventDefault</code> to prevent our form from actually trying to send information to a server as that’s not the behaviour we’d like. We also use the <code class=\"language-text\">Array.prototype.reduce</code> method to calculate the largest numeric id within our <code class=\"language-text\">liners</code> collection and we then simply add 1 to the id obtained to get our new id. We then call the <code class=\"language-text\">addLiner</code> method which is available on the <code class=\"language-text\">this.props</code>. We supply the new id, author and body to this method for processing. Finally, we go back to the index by calling <code class=\"language-text\">this.props.history.push('/')</code> which will take us to the root.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">handleSubmit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> newID <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>liners<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">maxId<span class=\"token punctuation\">,</span> liner</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxId<span class=\"token punctuation\">,</span> liner<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">addLiner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> newID<span class=\"token punctuation\">,</span>\n            author<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n            body<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>body\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We then need to create our <code class=\"language-text\">mapStateToProps</code> and <code class=\"language-text\">mapDispatchToProps</code> functions that we get to pass to Redux’s <code class=\"language-text\">connect</code> method. We get to add the <code class=\"language-text\">liners</code> and <code class=\"language-text\">authors</code> props to the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    liners<span class=\"token operator\">:</span> <span class=\"token function\">getAppState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liners\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    authors<span class=\"token operator\">:</span> <span class=\"token function\">getAppState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">addLiner</span><span class=\"token operator\">:</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addLiner</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>AddLine<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It’s now time to create the <code class=\"language-text\">addLiner</code> method in <code class=\"language-text\">src/containers/Home/actions.js</code>. We’ll create the <code class=\"language-text\">actions.js</code> file at <code class=\"language-text\">src/containers/Home</code>. We’ll import our constants and we’ll use them in the action object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ADD_LINER_REQUEST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ADD_LINERS_REQUEST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ADD_AUTHORS_REQUEST</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./constants\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchLinersRequest</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_LINERS_REQUEST</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addLiner</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_LINER_REQUEST</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We then need to update our saga at the Home screen. We’ll edit <code class=\"language-text\">src/screens/Home/saga.js</code>. We’ll setup the dependencies. We get to import the <code class=\"language-text\">all</code> method that combines multiple saga functions. We also import the <code class=\"language-text\">call</code> method that helps us resolve any promises. We use the <code class=\"language-text\">put</code> method to send an action to the Redux store. We also use the <code class=\"language-text\">takeLatest</code> method to take the latest available saga action.</p>\n<p>Next, we import the <code class=\"language-text\">getLinersData</code> method and a couple of constants.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> all<span class=\"token punctuation\">,</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> takeLatest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-saga/effects\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getLinersData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../services/DataService\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_LINERS_REQUEST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ADD_LINER_REQUEST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./constants\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SET_LINERS_DATA</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ADD_LINER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../containers/App/constants\"</span></code></pre></div>\n<p>We get to our <code class=\"language-text\">addLiner</code> method now. We simply use this as a wrapper that calls our put method with a type and some data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">addLiner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_LINER</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>…Then in the <code class=\"language-text\">root</code> method, we simply take the latest <code class=\"language-text\">ADD_LINER_REQUEST</code> and call the <code class=\"language-text\">addLiner</code> method above.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_LINERS_REQUEST</span><span class=\"token punctuation\">,</span> fetchLiners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_LINER_REQUEST</span><span class=\"token punctuation\">,</span> addLiner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We then need to update our reducer at <code class=\"language-text\">src/containers/App/reducer.js</code> and add some code. We’ll be using the <code class=\"language-text\">fromJS</code> method from ImmutableJS to turn Javascript objects or arrays to immutable ones. In our <code class=\"language-text\">AppReducer</code> function, we set the <code class=\"language-text\">liners</code> state property to an array that comprises of the initial liners data along with the new data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromJS <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"immutable\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_LINER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./constants\"</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  liners<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We then add our reducer code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AppReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_LINER</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"liners\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liners\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ve just completed functionality that enables us to add some new quotes easily. But, it’s not enough, as we’ll also need a way to keep our authors dynamic. Let’s tackle that.</p>\n<h4 id=\"dynamically-fetching-authors\" style=\"position:relative;\"><a href=\"#dynamically-fetching-authors\" aria-label=\"dynamically fetching authors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Fetching Authors.</h4>\n<p>We’d like to add a means of keeping our authors list dynamic. This is important, because along in this series, we’ll be adding functionality that allows us to create authors dynamically.</p>\n<p><strong>The Game Plan</strong></p>\n<p>We need to fetch our authors <em>immediately our app starts</em>. This means using a lifecycle event method to run the action that fetches our authors. That means we’ll be modifying the <code class=\"language-text\">App</code> root component a little to allow us add new behavior.</p>\n<p>Let’s edit <code class=\"language-text\">src/containers/App/index.js</code> and get to work. We’ll be adding some new dependencies. We’ll be using the <code class=\"language-text\">withRouter</code> method from <code class=\"language-text\">react-router</code> as we’d like to be able to access some router based properties within our component. We’ll also be importing the <code class=\"language-text\">fetchAuthorsRequest</code> from the Home screen actions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fetchAuthorsRequest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../screens/Home/actions\"</span></code></pre></div>\n<p>We’ll need to add the <code class=\"language-text\">componentDidMount</code> lifecycle method. We’ll be calling <code class=\"language-text\">this.props.fetchAuthors</code> in this method. We’ll define this method below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAuthors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we’ll run the usual <code class=\"language-text\">mapStateToProps</code> and <code class=\"language-text\">mapDispatchToProps</code> where we get to define the <code class=\"language-text\">fetchAuthors</code> method that will make the request to our saga telling it, “Hey, we want all the authors you’ve got”.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">fetchAuthors</span><span class=\"token operator\">:</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchAuthorsRequest</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n    mapStateToProps<span class=\"token punctuation\">,</span>\n    mapDispatchToProps\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, we must define the recently used <code class=\"language-text\">fetchAuthorsRequest</code> action dispatcher. We’ll add the <code class=\"language-text\">fetchAuthorsRequest</code> method to the <code class=\"language-text\">actions.js</code> file at <code class=\"language-text\">src/screens/Home</code>. We’re simply importing a couple of constants and we then define our action object. This will dispatch the <code class=\"language-text\">ADD_AUTHORS_REQUEST</code> action to our saga.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ADD_LINER_REQUEST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ADD_LINERS_REQUEST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ADD_AUTHORS_REQUEST</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./constants\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchAuthorsRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_AUTHORS_REQUEST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we’ll add a saga for this request. We’ll define the <code class=\"language-text\">fetchAuthors</code> generator function at <code class=\"language-text\">src/screens/Home/saga.js</code>. We’ll start off by importing the <code class=\"language-text\">getAuthorsData</code> method from the Data Service we created previously. We also import a couple of constants we’ll be using. We then use the special <code class=\"language-text\">call</code> method provided by Redux-Saga to resolve the promise returned by the <code class=\"language-text\">getAuthorsData</code> method. We then call the <code class=\"language-text\">put</code> method providing it with some required parameters (type and payload).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getAuthorsData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../services/DataService\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_AUTHORS_REQUEST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./constants\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SET_AUTHORS_DATA</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../containers/App/constants\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchAuthors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>getAuthorsData<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">SET_AUTHORS_DATA</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> response<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ll quickly define the imported constants. Editing <code class=\"language-text\">src/containers/App/constants.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SET_AUTHORS_DATA</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"app/SET_AUTHORS_DATA\"</span></code></pre></div>\n<p>Also editing <code class=\"language-text\">src/screens/Home/constants.js</code>.</p>\n<p><code class=\"language-text\"></code>js\nexport const ADD<em>AUTHORS</em>REQUEST = ‘app/ADD<em>AUTHORS</em>REQUEST’;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">We'll be defining the `getAuthorsData` method at the Data Service. Let's edit `src/services/DataService/index.js`. We'll be creating the `authors.json` file at `src/assets/data` shortly. In the meantime, we import the JSON data from it, and we resolve that data in a promise that we return.\n\n```js\nimport authorsData from \"../../assets/data/authors.json\";\n\nexport const getAuthorsData = (id = null) => {\n    if (id) {\n        let author = authorsData.filter(author => author.id === id);\n        return new Promise(resolve => resolve(author));\n    }\n\n    return new Promise(resolve => resolve(authorsData));\n};</code></pre></div>\n<p>It’s now time to create our <code class=\"language-text\">authors.json</code> along with the information. Let’s use this file as a base to build on. Create <code class=\"language-text\">src/assets/data/authors.json</code> and add test data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Immortal Technique\"</span><span class=\"token punctuation\">,</span>\n    government_name<span class=\"token operator\">:</span> <span class=\"token string\">\"Felipe Andres Coronel\"</span><span class=\"token punctuation\">,</span>\n    photo<span class=\"token operator\">:</span> <span class=\"token string\">\"immortal-technique.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Eminem\"</span><span class=\"token punctuation\">,</span>\n    government_name<span class=\"token operator\">:</span> <span class=\"token string\">\"Marshall Mathers\"</span><span class=\"token punctuation\">,</span>\n    photo<span class=\"token operator\">:</span> <span class=\"token string\">\"eminem.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Andre 3000\"</span><span class=\"token punctuation\">,</span>\n    photo<span class=\"token operator\">:</span> <span class=\"token string\">\"andre-3000.jpg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Great! All we need to do now is add a reducer for this action. We’ll start by importing the <code class=\"language-text\">SET_AUTHORS_DATA</code> constant. We then have the <code class=\"language-text\">authors</code> property of the initial state as being an empty object. We check for our <code class=\"language-text\">SET_AUTHORS_DATA</code> action and if our action was called we simply set the erstwhile empty <code class=\"language-text\">authors</code> property in the <code class=\"language-text\">initialState</code> array to the action’s payload data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SET_AUTHORS_DATA</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./constants\"</span>\n\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...Previous code here.</span>\n  authors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AppReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">SET_AUTHORS_DATA</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authors\"</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...Previous code goes here.</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Heading back to our browser tab at <code class=\"language-text\">http://localhost:3000</code>, we see our list of authors show up in the select box. That’s awesome! If we hit the submit button, we get to see our new entry with the selected author. Isn’t that great?</p>\n<p><img src=\"https://cdn.steemitimages.com/DQmSi9h899VwckeohzJbuxwSTK17YzE5w8jo7PLjNby6SCh/Add-Liner.gif\" alt=\"Dynamic entry adding in action\"></p>\n<h4 id=\"persisting-data-to-localstorage\" style=\"position:relative;\"><a href=\"#persisting-data-to-localstorage\" aria-label=\"persisting data to localstorage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Persisting Data To LocalStorage.</h4>\n<p>Earlier, we installed <code class=\"language-text\">redux-localstorage</code>. We need it for persisting data to the local storage. We can apply the middleware by updating some code at our Redux store. We first start by importing the <code class=\"language-text\">compose</code> Redux method we also import the <code class=\"language-text\">redux-localstorage</code> middleware. In our <code class=\"language-text\">createStoreWithMiddleware</code> method call, we use the <code class=\"language-text\">compose</code> method to compose our <code class=\"language-text\">persistState</code> function. We provide <code class=\"language-text\">undefined</code> as the first argument. This makes sure we sync all of our Redux store to local storage. We also define the <code class=\"language-text\">slicer</code>, <code class=\"language-text\">serialize</code>, <code class=\"language-text\">deserialize</code> and <code class=\"language-text\">merge</code> methods.</p>\n<p>We’ll go through the functionality of these methods:</p>\n<ul>\n<li><strong>The <code class=\"language-text\">slicer</code> method</strong>: returns a portion of the state.</li>\n<li><strong>The <code class=\"language-text\">serialize</code> method</strong>: can be used to perform an action before the data is saved or serialized to local storage.</li>\n<li><strong>The <code class=\"language-text\">deserialize</code> method</strong>: is used to perform an action <em>before</em> data is retrieved or deserialized from local storage.</li>\n<li><strong>The <code class=\"language-text\">merge</code> method</strong>: is used to merge the initial state and the persisted state. Since we’re using immutable, we’re merging the persisted data along with the initial state data through Immutable’s <code class=\"language-text\">mergeDeep</code> method.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compose <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> persistState <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-localstorage\"</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>\n  rootReducer<span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">persistState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">slicer</span><span class=\"token operator\">:</span> <span class=\"token parameter\">paths</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">serialize</span><span class=\"token operator\">:</span> <span class=\"token parameter\">subset</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>subset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">deserialize</span><span class=\"token operator\">:</span> <span class=\"token parameter\">serializedData</span> <span class=\"token operator\">=></span> <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>serializedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">merge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState<span class=\"token punctuation\">,</span> persistedState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        initialState<span class=\"token punctuation\">.</span><span class=\"token function\">mergeDeep</span><span class=\"token punctuation\">(</span>persistedState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We’ll stop at this juncture now. We’ve done a lot of work and we deserve some ice cream now.</p>\n<h4 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h4>\n<p>In this tutorial, we covered multiple concepts. We learned more about state management in large applications. We also wrote some more code to add more functionality. We then added the ability to persist our redux store to local storage.</p>\n<p>In our next tutorial, we’ll explore route based filtering from our store.</p>\n<h4 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h4>\n<ul>\n<li><a href=\"https://redux-saga.js.org/docs/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">An Introduction to Redux Saga</a></li>\n<li><a href=\"https://github.com/elgerlambert/redux-localstorage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux LocalStorage Middleware Introduction</a></li>\n<li><a href=\"https://github.com/creatrixity/fire-liners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FireLiners Github Code</a></li>\n</ul>\n<h4 id=\"curriculum\" style=\"position:relative;\"><a href=\"#curriculum\" aria-label=\"curriculum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Curriculum</h4>\n<ul>\n<li><a href=\"https://www.kaymathew.com/posts/pt-1-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part 1: Build a CSS-in-JS React App with Styled Components and Priceline Design System</a></li>\n<li><a href=\"https://www.kaymathew.com/posts/pt-2-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part 2: Build a CSS-in-JS React App with Styled Components and Priceline Design System</a></li>\n<li><a href=\"https://www.kaymathew.com/posts/pt-3-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part 3: Build a CSS-in-JS React App with Styled Components and Priceline Design System</a></li>\n</ul>","fields":{"slug":"/posts/pt-4-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/","tagSlugs":["/tag/javascript/","/tag/react/"]},"frontmatter":{"date":"2018-06-06T23:46:37.121Z","description":"Previously on this series, we learned more about state management in large applications and the benefits we could gain by adopting an architecture like Flux. We also add Redux application functionality to our FireLiners app complete with actions and Sagas.\nToday, we'll do just a little bit more. We'll be going in-depth into more state management practices and we'll setup dynamic data that we'll be using to populate our feed. Finally, we'll add functionality that allows us to persist our state to local storage.","tags":["Javascript","React"],"title":"Pt 4: Build a CSS-in-JS React App with Styled Components and Priceline Design System","socialImage":"https://steemitimages.com/256x512/https://preview.ibb.co/ixMvfy/A_Storage_Story.jpg"}}},"pageContext":{"slug":"/posts/pt-4-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"}},"staticQueryHashes":["251939775","401334301","4120999787"]}