{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/build-a-react-multi-step-wizard-with-formik-and-react-query","result":{"data":{"markdownRemark":{"id":"79a42406-b5ca-54ad-9952-c506425cae92","html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>Forms are probably the most ubiquitous elements on the web today. You’d be hard pressed to find a critical application without one or more forms. Forms are especially critical in commerce and finance applications where conversion success rates could be the difference between a windfall and bleak numbers.</p>\n<p>According to conversion authority <a href=\"https://salecycle.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SaleCycle</a>, <a href=\"https://blog.salecycle.com/strategies/infographic-people-abandon-shopping-carts/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>26% of people abandoned their purchase during checkout due to a long or complex process</strong></a><strong>.</strong> That’s got to hurt the bottomline of any company!</p>\n<p>It is best to keep forms simple and we can accomplish this by employing the <a href=\"https://www.smashingmagazine.com/2017/05/better-form-design-one-thing-per-page/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one thing per page pattern</a> popularised by Adam Silver and we can easily achieve this by employing multi-step wizards.</p>\n<h2 id=\"what-are-multi-step-wizards\" style=\"position:relative;\"><a href=\"#what-are-multi-step-wizards\" aria-label=\"what are multi step wizards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What are Multi-Step Wizards?</h2>\n<p>Multi step wizards are a solution allowing complex challenges to be broken down to a list of steps needed to accomplish a goal. Sometimes branching conditional logic is used to narrow the path to be taken by the user.</p>\n<p>Multi-step wizards allow us drop cognitive overload by a significant factor and heighten user anticipation on what is required (from them).</p>\n<p>Next, we’ll take a look at Formik and why it is such a great fit for form management in React.</p>\n<h2 id=\"what-is-formik\" style=\"position:relative;\"><a href=\"#what-is-formik\" aria-label=\"what is formik permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Formik?</h2>\n<p><a href=\"https://formik.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Formik</a> is a small library that helps make form management super-easy.</p>\n<p><a href=\"https://formik.org/docs/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">According to Jared Palmer</a> (the creator of the library), Formik was created as a way to standardize the flow of data through forms whilst maintaining minimal impact to the look and feel of input components.</p>\n<blockquote>\n<p><strong>My goal with Formik was to create a scalable, performant, form helper with a minimal API that does the really really annoying stuff, and leaves the rest up to you.</strong></p>\n<ul>\n<li><a href=\"https://twitter.com/jaredpalmer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jared Palmer</a></li>\n</ul>\n</blockquote>\n<p>Formik is really beneficial because it:</p>\n<ul>\n<li>Allows declarative form management whilst abstracting the mundane/repetitive drone associated with working with forms in React.</li>\n<li>Keeps forms familiar and intuitive. If you know a bit of React and know about forms, then you know Formik.</li>\n<li>Make no assumptions about your current state management solutions. You could be using Redux or MobX and it will play nice with either.</li>\n</ul>\n<h2 id=\"why-use-formik-for-wizards\" style=\"position:relative;\"><a href=\"#why-use-formik-for-wizards\" aria-label=\"why use formik for wizards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why use Formik for Wizards?</h2>\n<p>Formik is a good fit for building multi step wizards because we can keep form state localized and managed by Formik freeing us of the cruft of devising a solution for that ourselves.</p>\n<p>Formik allows us to maintain a single form management solution with benefits including:</p>\n<ul>\n<li>Formik is well documented so it can easily be referenced by yourself and team members.</li>\n<li>It makes it easier to maintain singular context when building apps as you know Formik got the forms business handled.</li>\n<li>Leverages a lot of practices already employed in building HTML forms making Formik forms feel much more natural and less like a contrived solution.</li>\n</ul>\n<p>Now we have a solution for managing form state, we’ll talk about a solution for managing server state on our client app.</p>\n<h2 id=\"react-query-introduction\" style=\"position:relative;\"><a href=\"#react-query-introduction\" aria-label=\"react query introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Query Introduction</h2>\n<p>React Query is a React library that makes <strong>fetching, caching, synchronizing and updating server state</strong> in your React applications a breeze.</p>\n<p>React Query exists as a solution because managing server side state on the client is a well documented pain. Typically you’d have to provide:</p>\n<ul>\n<li>Proper caching solutions with easy cache invalidation (<a href=\"https://quotesondesign.com/phil-karlton/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">notoriously difficult according to Phil Karlton</a>)</li>\n<li>Deduplication mechanisms for identifying duplicate data and merging them into one request to save on the overhead of multiple requests.</li>\n<li>Memoizing and normalizing data into a state where it is easier to access in a consistent fashion.</li>\n</ul>\n<h2 id=\"why-use-react-query\" style=\"position:relative;\"><a href=\"#why-use-react-query\" aria-label=\"why use react query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why use React Query?</h2>\n<p>React Query is one of the best libraries for managing server side state. React Query comes packing a lot of benefits. It can help:</p>\n<ul>\n<li>Drop the number of lines of code you need to make trivial requests.</li>\n<li>Make your applications feel more performant by saving on bandwidth and memory.</li>\n<li>Serve as a decoupling layer for remote calls as you can make REST/GraphQL requests and React Query will handle both use cases without a fuss.</li>\n</ul>\n<p>React Query has been particularly helpful for me as in the past, I’ve had to make HTTP calls and use Paul Armstrong’s <code class=\"language-text\">normalizr</code> and Redux selectors as a caching mechanism which involved significant boilerplate and complexity.</p>\n<p>Next, let’s move on to building a small proof-of -concept application with Formik and React Query.</p>\n<h2 id=\"creating-a-concept-crypto-portfolio-management-wizard\" style=\"position:relative;\"><a href=\"#creating-a-concept-crypto-portfolio-management-wizard\" aria-label=\"creating a concept crypto portfolio management wizard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Concept Crypto Portfolio Management Wizard</h2>\n<p>We’ll create a little demo app that allows users add cryptocurrencies, specify third-party crypto marketplaces (like Robinhood &#x26; Coinbase) where they’d like to manage their portfolios.</p>\n<p>Users then get to provide API tokens for the respective marketplaces selected.</p>\n<h2 id=\"pre-requisites\" style=\"position:relative;\"><a href=\"#pre-requisites\" aria-label=\"pre requisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-Requisites</h2>\n<ul>\n<li>You have Node (version 6 and greater) and NPM installed.</li>\n<li>You have an <strong>intermediate</strong> to <strong>advanced level</strong> understanding of React.</li>\n</ul>\n<h2 id=\"setup-project\" style=\"position:relative;\"><a href=\"#setup-project\" aria-label=\"setup project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Project</h2>\n<p>First of all, we create a new React project and start up the development server:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx create-react-app crypto-portfolio\ncd crypto-portfolio\nnpm start</code></pre></div>\n<p>We need to install dependencies for routing, styling modules, form management and HTTP requests.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react-router-dom node-sass formik axios react-query classnames --save</code></pre></div>\n<p>A personal preference of mine is to <a href=\"https://create-react-app.dev/docs/importing-a-component\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use absolute imports</a> as I find them cleaner and much more easy to reason about. You can add absolute imports by creating a <code class=\"language-text\">jsconfig.json</code> file with the content below at the root directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"compilerOptions\": {\n      \"baseUrl\": \"src\"\n    },\n    \"include\": [\"src\"]\n}</code></pre></div>\n<p>For proper accessibility, we need to have each wizard screen contained in its own route. We’ll be employing a system of nested routes that allow us reflect semantic relationships via URLs.</p>\n<p>We’ll update the <code class=\"language-text\">src/index.js</code> file to register our router:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRouter from 'components/AppRouter';\n\nReactDOM.render(\n  &lt;React.StrictMode>\n    &lt;AppRouter />\n  &lt;/React.StrictMode>,\n  document.getElementById('root')\n);</code></pre></div>\n<p>For our top level routes, let us define an <code class=\"language-text\">AppRouter</code> component that should help us setup a top level route for portfolio creation. Create an <code class=\"language-text\">AppRouter.js</code> file at <code class=\"language-text\">src/components</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Suspense, lazy } from \"react\"\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport NotFound from 'screens/NotFound'\n\nconst Portfolio = lazy(() => import(\"screens/Portfolio\"))\n\nfunction AppRouter() {\n  return (\n    &lt;BrowserRouter>\n      &lt;Suspense fallback={&lt;NotFound />}>\n        &lt;Switch>\n          &lt;Route component={Portfolio} path=\"/portfolio\" />\n          &lt;Route component={NotFound} />\n        &lt;/Switch>\n      &lt;/Suspense>\n    &lt;/BrowserRouter>\n  );\n}\n\nexport default AppRouter;</code></pre></div>\n<p>We’re leveraging <code class=\"language-text\">Suspense</code> so we can lazy-load our route components for better performance. We also referenced <code class=\"language-text\">NotFound</code> and <code class=\"language-text\">Portfolio</code> components which we will create shortly. The <code class=\"language-text\">NotFound</code> component is a trivial component displaying a simple error message.</p>\n<p>Create <code class=\"language-text\">src/screens/NotFound.js</code> and fill it out:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function NotFound() {\n    return (\n        &lt;div>\n            &lt;h2>Page not found&lt;/h2>\n        &lt;/div>\n    )\n}\n\nexport default NotFound</code></pre></div>\n<p>Our <code class=\"language-text\">Portfolio</code> component provides a mounting point to introduce the <code class=\"language-text\">Formik</code> provider. We setup the Formik provider, provide default values for the form and assemble routes for each wizard screen. We also define some redirects to take care of possible incomplete URLs from our users.</p>\n<p>We’ll import some styles from our <code class=\"language-text\">Portfolio.module.scss</code> CSS module. We also intend on creating an array list of routes that allows us define information about the steps in the wizard. We also plan on using a custom <code class=\"language-text\">StepsRouter</code> component to render the routes and a <code class=\"language-text\">Steps</code> indicator so users can get a visual on their progress.</p>\n<p>Let’s create a <code class=\"language-text\">Portfolio.js</code> file at <code class=\"language-text\">src/screens/Portfolio</code> and add some code.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Suspense } from \"react\"\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport styles from './Portfolio.module.scss'\nimport stepsComposer from './steps'\nimport StepsRouter from 'components/StepsRouter'\nimport NotFound from 'screens/NotFound'\n\nconst initialFormValues = {\n    portfolioName: '',\n    marketplaces: {}\n}\n\nfunction Portfolio({ match: { url } }) {\n    return (\n        &lt;div className={styles.Portfolio__Container}>\n            &lt;Formik initialValues={initialFormValues}>\n                &lt;BrowserRouter>\n                    &lt;Suspense fallback={&lt;NotFound />}>\n                        &lt;Switch>\n                            &lt;StepsRouter steps={stepsComposer({ url })} />\n                            &lt;Route exact path={`${url}/create`} render={() => &lt;Redirect to={`${url}/create/add-name`} />} />\n                            &lt;Route path=\"/\" render={() => &lt;Redirect to={`${url}/create`} />} />\n                            &lt;Route component={NotFound} />\n                        &lt;/Switch>\n                    &lt;/Suspense>\n                &lt;/BrowserRouter>\n            &lt;/Formik>\n        &lt;/div>\n    )\n}\nexport default Portfolio</code></pre></div>\n<h2 id=\"setting-up-the-enhanced-custom-router\" style=\"position:relative;\"><a href=\"#setting-up-the-enhanced-custom-router\" aria-label=\"setting up the enhanced custom router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting Up the Enhanced Custom Router</h2>\n<p>Let’s define the steps for our wizard in a <code class=\"language-text\">steps.js</code> file at <code class=\"language-text\">src/screens/Portfolio</code>. We’ll supply information about the route—mainly the component we intend to render, its path and the label for it on the step indicator.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { lazy } from \"react\"\n\nconst AddName = lazy(() => import(\"./screens/AddName\"))\nconst SelectCrypto = lazy(() => import(\"./screens/SelectCrypto\"))\nconst AddKeys = lazy(() => import(\"./screens/AddKeys\"))\n\nconst stepsComposer = ({ url }) => [\n    {\n        path: `${url}/create/add-name`,\n        Component: AddName,\n        label: \"Add Name\"\n    },\n    {\n        path: `${url}/create/select-crypto`,\n        Component: SelectCrypto,\n        label: \"Select Crypto\"\n    },\n    {\n        path: `${url}/create/add-keys`,\n        Component: AddKeys,\n        label: \"Add Keys\"\n    }\n]\n\nexport default stepsComposer</code></pre></div>\n<p>With our list of steps in hand, we need to create our <code class=\"language-text\">StepsRouter</code> component. Our <code class=\"language-text\">StepsRouter</code> component will pick up the list of steps we listed earlier and render each one. We’ll also define an <code class=\"language-text\">EnhancedRoute</code> component that will receive an extra prop which will be useful to us going forward.</p>\n<p>We’ll create the <code class=\"language-text\">StepsRouter.js</code> file at <code class=\"language-text\">src/components/StepsRouter</code> .</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Route } from \"react-router-dom\";\n\nimport EnhancedRoute from \"./EnhancedRoute\";\n\nconst StepsRouter = ({ steps }) => {\n    return (\n        &lt;>\n            {steps.map((step, index) => (\n                &lt;Route\n                    path={step.path}\n                    key={index}\n                    render={props => &lt;EnhancedRoute {...props} step={step} steps={steps} />}\n                />\n            ))}\n        &lt;/>\n    );\n}\n\nexport default StepsRouter;</code></pre></div>\n<p>We need to define the <code class=\"language-text\">EnhancedRoute</code> component that is responsible for ‘enhancing’ the <code class=\"language-text\">props</code> passed to the wizard screen routes. We’ll create <code class=\"language-text\">EnhancedRouter.js</code> at the same directory as the above.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { generateStepsList } from \"utils\";\n\nfunction EnhancedRoute ({ step, steps, ...props }) {\n    const { match, location: { pathname } } = props;\n    const { Component } = step\n    const stepsList = steps.map(generateStepsList({\n      route: { pathname, ...match },\n    }));\n    return (\n        &lt;Component {...props} stepsList={stepsList} />\n    )\n}\n\nexport default EnhancedRoute</code></pre></div>\n<p>We defined a <code class=\"language-text\">generateStepsList</code> utility function so we need to create the <code class=\"language-text\">utils.js</code> file at the <code class=\"language-text\">src</code> directory. This utility will return a fully resolved path for a route</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/**\n * Generates a list of steps for display by the steps component.\n *\n * This function returns a function that accepts a step object and returns\n * the object with extra properties.\n *\n * @param {Object} route\n * @returns {Function}\n */\nexport function generateStepsList({ route }) {\n    const routeParams = route.params\n    const routeParamKeys = Object.keys(routeParams)\n    // Swap out any dynamic routes with their param values so \"/portfolio/:portfolioId\" becomes \"/portfolio/1\"\n    const replaceParams = (path, param) => path.replace(`:${param}`, routeParams[param]);\n    const createStepEntry = ({ path, label }) => {\n        let routePath = routeParamKeys.length ? routeParamKeys.reduce(replaceParams, path) : path\n        let active = route.pathname === path\n        return {\n            path: routePath,\n            active,\n            label\n        };\n    }\n    return createStepEntry;\n  }</code></pre></div>\n<p>Now we need to create the <code class=\"language-text\">Steps.js</code> component at <code class=\"language-text\">src/components/Steps</code> as this component will display and give us visual progress updates.</p>\n<p>We’ll use the <code class=\"language-text\">classnames</code> package to help us manage the conditional statements used to style the indicators and we’ll store information about the <code class=\"language-text\">active step</code>, the <code class=\"language-text\">last step</code> and the <code class=\"language-text\">completed steps</code> .</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Steps.module.scss\";\nimport classNames from \"classnames/bind\";\n\nlet cx = classNames.bind(styles);\n\nfunction Steps({ steps }) {\n  const activeIdx = steps.reduce((acc, curr, idx) => curr.active ? idx: acc, 0)\n\n  return (\n    &lt;div className={styles.Steps__Wrapper}>\n      &lt;ol className={styles.Steps}>\n        {steps.map(({ label, path, active }, idx) => {\n          const isLastStep = idx === steps.length - 1;\n          const completed = idx &lt; activeIdx\n          const stepWidth = 100 / (steps.length);\n          let stepClasses = cx({\n            Step: true,\n            Step__Last: isLastStep,\n            Step__Current: active,\n            Step__Completed: completed\n          });\n          const checkmarkClass = completed ? 'checkmark-primary': 'checkmark-default'\n          return (\n            &lt;li className={stepClasses} style={{ left: `${stepWidth/2}%` }} key={idx}>\n              &lt;Link to={path} className={styles.Step__Milestone}>\n                &lt;i className={`checkmark ${checkmarkClass}`} />\n              &lt;/Link>\n              {active ? (\n                &lt;span className={styles.Step__Label}>{label}&lt;/span>\n              ) : (\n                &lt;Link to={path} className={styles.Step__Label}>\n                  {label}\n                &lt;/Link>\n              )}\n            &lt;/li>\n          );\n        })}\n      &lt;/ol>\n    &lt;/div>\n  );\n}\n\nSteps.defaultProps = {\n  steps: [],\n};\n\nexport default Steps;</code></pre></div>\n<p>We also need to define styling for the <code class=\"language-text\">Steps</code> component so we create <code class=\"language-text\">src/components/Steps/Steps.module.scss</code> and add the content below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$secondary: #0056D8;\n$light-gray: #F0F1F3;\n$gray: #CCC;\n$pale-blue: #D3E0F2;\n\n.Steps__Wrapper {\n    display: block;\n  }\n\n  .Steps {\n    position: relative;\n    display: flex;\n    padding: 0;\n    list-style: none;\n    width: inherit;\n  }\n\n  .Step {\n    position: relative;\n    font-size: 12px;\n    flex: 1;\n  }\n\n  .Step__Label {\n    color: $gray;\n  }\n\n  .Step {\n    &amp;::before {\n      content: \"\";\n      width: 100%;\n      height: 8px;\n      background-color: $gray;\n      position: absolute;\n    }\n\n    &amp;__Milestone {\n      width: 28px;\n      height: 28px;\n      border-radius: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: $light-gray;\n      border: 2px solid $gray;\n      position: relative;\n      bottom: 10px;\n      position: relative;\n    }\n  }\n\n  .Step__Completed {\n    &amp;::before {\n      background: $secondary;\n    }\n    .Step__Milestone {\n      background: $pale-blue;\n      color: $secondary;\n      border-color: $secondary;\n    }\n  }\n\n  .Step__Completed .Step__Label,\n  .Step__Current .Step__Label {\n    color: $secondary;\n  }\n\n  .Step__Current {\n    .Step__Milestone {\n      background: $secondary;\n      border-color: $secondary;\n    }\n    .Step__Label {\n      font-weight: bolder;\n    }\n  }\n\n  .Step__Last::before {\n    content: \"\";\n    display: none;\n  }</code></pre></div>\n<p>We’ll also define a few global styles at <code class=\"language-text\">src/index.css</code> and you can <a href=\"https://github.com/creatrixity/crypto-portfolio/blob/master/src/index.css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">take a look at the styles here</a>.\nAt this point, you should have a visual indicator that looks like this:</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1614667109771_Screenshot+2021-03-02+at+7.38.10+AM.png\" alt=\"Visual steps indicator component UI\"></p>\n<h2 id=\"creating-the-addname-screen\" style=\"position:relative;\"><a href=\"#creating-the-addname-screen\" aria-label=\"creating the addname screen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating the <code class=\"language-text\">AddName</code> Screen</h2>\n<p>We can now create our first screen—the <code class=\"language-text\">AddName</code> screen. Create <code class=\"language-text\">AddName.js</code> at <code class=\"language-text\">src/screens/Portfolio/screens</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Field } from \"formik\";\nimport { Link } from \"react-router-dom\";\nimport Steps from \"components/Steps\";\nimport styles from 'screens/Portfolio/Portfolio.module.scss'\n\nfunction AddName({ stepsList, ...props }) {\n    return (\n        &lt;div>\n            &lt;section className={styles.Section__Heading}>\n                &lt;h2 className={styles.Section__Heading__Title}>Give your portfolio a name.&lt;/h2>\n                &lt;p>A simple name to identify your portfolio by.&lt;/p>\n            &lt;/section>\n            &lt;div className={styles.Steps__Container}>\n                &lt;Steps steps={stepsList} />\n            &lt;/div>\n            &lt;section className={styles.Form__Card}>\n                &lt;label className={styles.Form__Label}>Portfolio Name&lt;/label>\n                &lt;Field\n                  type=\"text\"\n                  name=\"portfolioName\"\n                  className={styles.Form__Field}\n                />\n                &lt;div className={styles.Form__Button__Container}>\n                    &lt;Link to={`/portfolio`} className=\"btn\">\n                        &lt;span className=\"chevron left\" />\n                        Back\n                    &lt;/Link>\n                    &lt;Link to={`/portfolio/create/select-crypto`} className=\"btn btn-primary\">\n                        Select Crypto\n                        &lt;span className=\"chevron right\" />\n                  &lt;/Link>\n                &lt;/div>\n            &lt;/section>\n        &lt;/div>\n    )\n}\n\nexport default AddName</code></pre></div>\n<p>Our <code class=\"language-text\">AddName</code> screen should look like this now</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1614668021667_Screenshot+2021-03-02+at+7.52.26+AM.png\" alt=\"A shot of the Add Portfolio Name screen\"></p>\n<h2 id=\"setting-up-a-mock-json-api\" style=\"position:relative;\"><a href=\"#setting-up-a-mock-json-api\" aria-label=\"setting up a mock json api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Mock JSON API</h2>\n<p>For our next screen, we’ll need to run a mock JSON server which we’ll use to fetch a list of crypto and marketplaces associated with them.</p>\n<p>First of all, run <code class=\"language-text\">npm install -g json-server</code> to install the <code class=\"language-text\">json-server</code> package we’ll use for mocking.</p>\n<p>Next, create a <code class=\"language-text\">crypto.json</code> file at a new directory we’ll name <code class=\"language-text\">mocks</code> at the root directory. We’ll add some seed data to the file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"crypto\": [\n        {\n            \"id\": 1,\n            \"label\": \"Bitcoin\",\n            \"name\": \"bitcoin\",\n            \"marketplaces\": [\n                {\"id\":1, \"label\": \"Robinhood\", \"brand_url\": \"http://localhost:3000/brands/robinhood.svg\", \"name\":\"robinhood\"},\n                {\"id\":2, \"label\": \"Coinbase\", \"brand_url\": \"http://localhost:3000/brands/coinbase.svg\", \"name\":\"coinbase\"}\n            ]\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Ethereum\",\n            \"name\": \"ethereum\",\n            \"marketplaces\": [\n                {\"id\":1, \"label\": \"Robinhood\", \"brand_url\": \"http://localhost:3000/brands/robinhood.svg\", \"name\":\"robinhood\"},\n                {\"id\":2, \"label\": \"Coinbase\", \"brand_url\": \"http://localhost:3000/brands/coinbase.svg\", \"name\":\"coinbase\"}\n            ]\n        }\n    ],\n\n    \"marketplaces\": [\n        {\"id\":1, \"label\": \"Robinhood\", \"brand_url\": \"http://localhost:3000/brands/robinhood.svg\", \"name\":\"robinhood\"},\n        {\"id\":2, \"label\": \"Coinbase\", \"brand_url\": \"http://localhost:3000/brands/coinbase.svg\", \"name\":\"coinbase\"}\n    ]\n}</code></pre></div>\n<p>We’ll start the JSON server by visiting the shell and running the below command which makes data from the mock available at port <code class=\"language-text\">3001</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">json-server --watch mocks/data.json --port 3001</code></pre></div>\n<h2 id=\"building-the-select-crypto-screen\" style=\"position:relative;\"><a href=\"#building-the-select-crypto-screen\" aria-label=\"building the select crypto screen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building the Select Crypto Screen</h2>\n<p>We need to add a couple of specialized form controls for the crypto selection screen. I’ve prebuilt a <code class=\"language-text\">CheckboxCard</code> and also a <code class=\"language-text\">CheckboxRound</code> component to save time. You may read the source for the <code class=\"language-text\">[CheckboxCard](https://github.com/creatrixity/crypto-portfolio/blob/master/src/components/CheckboxCard/CheckboxCard.js)</code> and the <code class=\"language-text\">[CheckboxRound](https://github.com/creatrixity/crypto-portfolio/blob/master/src/components/CheckboxRound/CheckboxRound.js)</code> if you desire.\n<a href=\"https://github.com/creatrixity/crypto-portfolio/blob/master/src/components/CheckboxRound/CheckboxRound.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>\nWe can now create our next screen—the <code class=\"language-text\">SelectCrypto</code> screen. We’ll be doing a lot in this screen as we’ll need to define a new <code class=\"language-text\">CryptoField</code> component that is responsible for showing crypto marketplace information. When the component mounts, we will preselect all crypto marketplaces so the user finds it easier to eliminate options.</p>\n<p>For this screen, we’ll use the <code class=\"language-text\">Formik</code> context hook which allows us to get and set values for our form. We also use <code class=\"language-text\">React-Query</code> to fetch</p>\n<p>I defined a couple of utility functions to help with our HTTP request management and take care of error/success responses. Update <code class=\"language-text\">src/utils</code> and add the below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import axiosInstance from 'axios'\n\nconst REACT_APP_API_BASE_URL = \"http://localhost:3001\"\n\nexport const axios = axiosInstance.create({\n    baseURL: REACT_APP_API_BASE_URL,\n});\n\nexport function handleResponse(response) {\n    if (response.data) {\n      return Promise.resolve(response.data);\n    }\n\n    return Promise.resolve(response);\n}\n\nexport function handleError(error) {\n    if (error.data) {\n        return Promise.reject(error.data);\n    }\n\n    return Promise.reject(error);\n}\n\nexport const fetchAll = (resource) => axios.get(resource).then(handleResponse).catch(handleError);</code></pre></div>\n<p>As part of our development process, we’ll iterate through the cryptocurrencies list we fetched and render a <code class=\"language-text\">CryptoField</code> component for each entry.</p>\n<p>Create <code class=\"language-text\">SelectCrypto.js</code> at <code class=\"language-text\">src/screens/Portfolio/screens</code> and add the below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useEffect } from 'react'\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport { useFormikContext } from \"formik\";\n\nimport Steps from \"components/Steps\";\nimport CryptoField from \"components/CryptoField\";\nimport styles from 'screens/Portfolio/Portfolio.module.scss'\nimport { fetchAll } from 'utils'\n\nfunction SelectCrypto({ stepsList }) {\n    const { values, setFieldValue } = useFormikContext();\n    const { isLoading, error, data: cryptocurrencies } = useQuery(\n        \"cryptocurrencies\",\n        () => fetchAll(\"/crypto\")\n    );\n\n    useEffect(() => {\n        // Prefill all marketplaces by reducing the cryptocurrencies list\n        if (!Object.keys(values.marketplaces).length) {\n          let marketplaces = cryptocurrencies.reduce((acc, curr) => {\n            return {\n              ...acc,\n              [curr.id]: curr.marketplaces.map(({ id }) => id),\n            };\n          }, {});\n\n          // Use the context hook to replace the marketplaces object\n          setFieldValue(\"marketplaces\", marketplaces);\n        }\n    }, [cryptocurrencies, setFieldValue, values.marketplaces]);\n\n    if (isLoading) return &lt;p>Loading...&lt;/p>\n    if (error) return &lt;p>Error&lt;/p>\n\n    return (\n        &lt;div>\n            &lt;section className={styles.Section__Heading}>\n                &lt;h2 className={styles.Section__Heading__Title}>Select the crypto you wish to manage&lt;/h2>\n                &lt;p>Pick cryptocurrencies and choose exchanges to trade them on.&lt;/p>\n            &lt;/section>\n            &lt;div className={styles.Steps__Container}>\n                &lt;Steps steps={stepsList} />\n            &lt;/div>\n            &lt;section className={styles.Form__Card}>\n                {cryptocurrencies.map((crypto, idx) => (\n                    &lt;div className=\"mb-2\" key={idx}>\n                        &lt;CryptoField\n                            crypto={crypto}\n                            selectedMarketplaces={values.marketplaces[crypto.id] || []}\n                        />\n                    &lt;/div>\n                ))}\n                &lt;div className={styles.Form__Button__Container}>\n                    &lt;Link to={`/portfolio/create`} className=\"btn\">\n                        &lt;span className=\"chevron left\" />\n                        Back\n                    &lt;/Link>\n                    &lt;Link to={`/portfolio/create/add-keys`} className=\"btn btn-primary\">\n                        Add Keys\n                        &lt;span className=\"chevron right\" />\n                  &lt;/Link>\n                &lt;/div>\n            &lt;/section>\n        &lt;/div>\n    )\n}\nexport default SelectCrypto</code></pre></div>\n<p><strong>Creating the CryptoField Component</strong></p>\n<p>The <code class=\"language-text\">CryptoField</code> component displays a cryptocurrency and the marketplaces associated with it.\nIt receives the following as <code class=\"language-text\">props</code>:</p>\n<ul>\n<li>A <code class=\"language-text\">crypto</code> object which contains a list of marketplaces to be selected by a user</li>\n<li>A <code class=\"language-text\">selectedMarketplaces</code> array which contains the <code class=\"language-text\">id</code> for each selected marketplace.</li>\n</ul>\n<p>Let’s create the <code class=\"language-text\">CryptoField.js</code> file at <code class=\"language-text\">src/components/CryptoField</code> and add some code. At the moment we’re rendering a checkbox component and displaying a description. We’re using the <code class=\"language-text\">FieldArray</code> component from <code class=\"language-text\">Formik</code> to handle working with the marketplaces array and the render prop for the <code class=\"language-text\">FieldArray</code> can <a href=\"https://formik.org/docs/api/fieldarray#fieldarray-helpers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">receive a bunch of helpers as arguments</a>.\nOur strategy is to mark a cryptocurrency as selected if it has at least one marketplace selected.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from \"react\";\nimport { FieldArray } from \"formik\";\n\nimport CheckboxRound from \"components/CheckboxRound\";\n\nconst descriptions = {\n    bitcoin: \"Bitcoin was the first cryptocurrency to successfully record transactions on a secure, decentralized blockchain-based network.\",\n    ethereum: \"Ethereum is a decentralized computing platform which runs smart contracts and uses the Ether cryptocurrency built on top of the open source Ethereum blockchain\"\n}\n\nconst CryptoField = ({ crypto, selectedMarketplaces }) => {\n    return (\n        &lt;FieldArray\n            name={`marketplaces.${crypto.id}`}\n            render={(arrayHelpers) => (\n                &lt;section className=\"\">\n                    &lt;section className=\"d-flex align-items-center\">\n                        &lt;CheckboxRound\n                            checked={selectedMarketplaces.length}\n                            onChange={() => {\n                                if (selectedMarketplaces.length) {\n                                    selectedMarketplaces.map(() => arrayHelpers.pop());\n                                } else {\n                                    crypto.marketplaces.map(({ id }) => arrayHelpers.push(id));\n                                }\n                            }}\n                            id={crypto.name}\n                        />\n                        &lt;div className=\"ml-4 d-flex\">\n                            &lt;img src={crypto.brand_url} alt={`${crypto.label} logo`} className=\"mr-6\" />\n                            &lt;b className=\"h6\">{crypto.label}&lt;/b>\n                        &lt;/div>\n                    &lt;/section>\n                    &lt;div className=\"w-100 mb-4 ml-3\">\n                        {descriptions.hasOwnProperty(crypto.name) ? (\n                            &lt;p className=\"text-muted small\">{descriptions[crypto.name]}&lt;/p>\n                        ) : null}\n                    &lt;/div>\n                &lt;/section>\n            )}\n        />\n    )\n}\n\nexport default CryptoField</code></pre></div>\n<p>At the moment, our screen should look like below</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1614936899255_Screenshot+2021-03-05+at+10.34.40+AM.png\" alt=\"A shot of the Select Crypto screen with coins only\"></p>\n<p>We need to display the marketplaces so we will make an update to the <code class=\"language-text\">CryptoField</code> component. We will loop through marketplaces list and display a <code class=\"language-text\">CheckboxCard</code> for each marketplace.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;div className=\"d-flex mb-3\">\n  {crypto.marketplaces.map((marketplace, idx) => {\n      const marketplaceSelected = selectedMarketplaces.includes(marketplace.id);\n      return (\n          &lt;section className=\"mr-4 flex-1\" key={idx}>\n              &lt;CheckboxCard\n                  checked={marketplaceSelected}\n                  onChange={(e) => {\n                      if (marketplaceSelected) {\n                          arrayHelpers.remove(\n                              selectedMarketplaces.indexOf(marketplace.id)\n                          );\n                      } else {\n                          arrayHelpers.push(marketplace.id);\n                      }\n                  }\n              }\n              label={marketplace.label}\n              >\n              &lt;img src={marketplace.brand_url} alt=\"Marketplace logo\" />\n              &lt;/CheckboxCard>\n          &lt;/section>\n      );\n  })}\n  &lt;/div></code></pre></div>\n<p>Now we have a complete interface that looks like below</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1615099803308_Screenshot+2021-03-07+at+7.49.11+AM.png\" alt=\"A shot of the Select Crypto screen with coins and marketplaces\"></p>\n<h2 id=\"completing-the-add-keys-screen\" style=\"position:relative;\"><a href=\"#completing-the-add-keys-screen\" aria-label=\"completing the add keys screen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Completing the Add Keys Screen</h2>\n<p>The <code class=\"language-text\">AddKey</code> screen is pretty similar to the <code class=\"language-text\">SelectCrypto</code> screen. We will be allowing users update keys on only marketplaces they selected and to do this, we need to fetch the ids of the marketplaces, pass them into a <code class=\"language-text\">Set</code> (to get rid of duplicates) and then use them to create a list to iterate through.</p>\n<p>Make an update to <code class=\"language-text\">src/screens/Portfolio/AddKeys.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport { fetchAll } from 'utils'\nimport { useFormikContext } from \"formik\";\n\nimport Steps from \"components/Steps\";\nimport styles from 'screens/Portfolio/Portfolio.module.scss'\nimport MarketplaceKeyField from \"components/MarketplaceKeyField\";\n\nfunction AddKeys({ stepsList }) {\n    const [selectedMarketplaces, setSelectedMarketplaces] = useState([])\n    const { isLoading, error, data: marketplacesList = [] } = useQuery(\n        \"marketplaces\",\n        () => fetchAll(\"/marketplaces\")\n    );\n\n    const marketplaces = marketplacesList.reduce((acc, curr) => ({\n        ...acc,\n        [curr.id]: curr\n    }), {})\n\n    const { values } = useFormikContext();\n\n    useEffect(() => {\n        const selectedMarketplaces = [\n            ...new Set(\n                Object.values(values.marketplaces).reduce(\n                    (vendorsList, vendor) => [...vendorsList, ...vendor],\n                    []\n                )\n            )\n        ]\n        setSelectedMarketplaces(selectedMarketplaces)\n    }, [values.marketplaces])\n\n    if (isLoading) return &lt;p>Loading...&lt;/p>\n    if (error) return &lt;p>Error&lt;/p>\n\n    return (\n        &lt;div>\n            &lt;section className={styles.Section__Heading}>\n                &lt;h2 className={styles.Section__Heading__Title}>Take control with your keys.&lt;/h2>\n                &lt;p>Adding your keys allows you more control over integrations.&lt;/p>\n            &lt;/section>\n\n            &lt;div className={styles.Steps__Container}>\n                &lt;Steps steps={stepsList} />\n            &lt;/div>\n\n            &lt;section className={styles.Form__Card}>\n                {selectedMarketplaces.map((marketplaceId, idx) => (\n                    &lt;div className=\"mb-4\" key={idx}>\n                        &lt;MarketplaceKeyField marketplace={marketplaces[marketplaceId]} />\n                    &lt;/div>\n                ))}\n\n                &lt;div className={styles.Form__Button__Container}>\n                    &lt;Link to={`/portfolio/create/select-crypto`} className=\"btn\">\n                        &lt;span className=\"chevron left\" />\n                        Back\n                    &lt;/Link>\n                    &lt;button\n                        type=\"submit\"\n                        className=\"btn btn-sm btn-primary font-weight-bold\"\n                    >\n                        Submit\n                        &lt;span className=\"chevron right\" />\n                    &lt;/button>\n                &lt;/div>\n            &lt;/section>\n        &lt;/div>\n    )\n}\nexport default AddKeys</code></pre></div>\n<p><strong>Creating the MarketplaceKeyField Component</strong></p>\n<p>We need to define the <code class=\"language-text\">MarketplaceKeyField</code> component which will be display the input fields for the marketplaces. We’ll use the <code class=\"language-text\">useField</code> Formik hook to get and set single field values.</p>\n<p>Create <code class=\"language-text\">MarketplaceKeyField.js</code> at <code class=\"language-text\">src/components/Marketplace/MarketplaceKeyField</code> and update.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { FieldArray, useField } from \"formik\";\n\nconst MarketplaceKeyField = ({ marketplace }) => {\n    const identifier = `secrets.${marketplace.id}`;\n    const [field, , helpers] = useField(identifier);\n\n    return (\n        &lt;FieldArray\n            name={`marketplaces.${marketplace.id}`}\n            render={() => {\n            return (\n                &lt;div className=\"d-flex\">\n                &lt;label htmlFor={identifier} className=\"mr-4\" style={{ width: \"50%\" }}>\n                    &lt;img\n                    src={marketplace.brand_url}\n                    alt={marketplace.label}\n                    className=\"img img-responsive\"\n                    />\n                &lt;/label>\n                    &lt;input\n                    className=\"d-inline-block w-100\"\n                    id={identifier}\n                    name={identifier}\n                    value={field.value || \"\"}\n                    autoSave={false}\n                    onChange={(e) => helpers.setValue(e.target.value)}\n                    type=\"password\"\n                    />\n                &lt;/div>\n            );\n            }}\n      />\n    )\n}\n\nexport default MarketplaceKeyField</code></pre></div>\n<p>We have arrived at a result as seen below:</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1615121324789_Screenshot+2021-03-07+at+1.45.16+PM.png\" alt=\"A shot of the Add Keys screen\"></p>\n<h2 id=\"handling-form-submits-with-formik\" style=\"position:relative;\"><a href=\"#handling-form-submits-with-formik\" aria-label=\"handling form submits with formik permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling Form Submits with <code class=\"language-text\">Formik</code></h2>\n<p>With our wizard screens and controls all set up, we need a way to send the information collected to a server for persistence and any further processing.</p>\n<p>We’ll be making updates to the <code class=\"language-text\">Portfolio</code> component and wrapping the routes in a <code class=\"language-text\">&lt;form/></code> element. We’ll make use of a render function to gain access to the <code class=\"language-text\">Formik</code> submit handler and <em>then pass that handler to the form</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    return (\n        &lt;div className={styles.Portfolio__Container}>\n            &lt;Formik initialValues={initialFormValues} onSubmit={handleFormSubmit}>\n            {({ handleSubmit }) => (\n                &lt;form onSubmit={handleSubmit}>\n                  {/* ...Rest of the Router goes here */}\n                &lt;/form>\n            &lt;/Formik>\n        &lt;/div></code></pre></div>\n<p>We’ll define the submit handler shortly. When using <code class=\"language-text\">react-query</code>, information is persisted to the backend by using <code class=\"language-text\">mutations</code>. We’ll create our very first mutation and we’ll create a mutation request handler that logs our payload and if you had a functional server, you could initiate an actual <code class=\"language-text\">HTTP</code> or <code class=\"language-text\">graphql</code> request.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { useMutation } from \"react-query\";\n\nconst portfolioCreationRequest = async (payload) => {\n    console.log(JSON.stringify(payload))\n    setTimeout(() => {\n        return Promise.resolve(\"success\");\n    }, 3000)\n  };\n\nfunction Portfolio({ match: { url, path }, history }) {\n  const mutation = useMutation(portfolioCreationRequest, {\n      onSuccess: () => {\n        history.push(`${path}/success`);\n      },\n    });\n\n  const handleFormSubmit = (values) => {\n      const { portfolioName, marketplaces, secrets } = values;\n      const payload = {\n          portfolioName,\n          marketplaces,\n          secrets\n      }\n\n      mutation.mutate(payload)\n  }\n// ... rest of the component\n}</code></pre></div>\n<p>Testing out our submit, we get to see the payload was successfully logged.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1615189148707_Screenshot+2021-03-08+at+8.38.48+AM.png\" alt=\"A shot of the payload recorded when testing the Formik submit handler\"></p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p><code class=\"language-text\">Formik</code> and <code class=\"language-text\">React-Query</code> are formidable tools within the grasp of React engineers which can be leveraged to create consistent solutions to recurring problems.</p>\n<p>I encourage a deeper delve into <a href=\"https://formik.org/docs/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Formik</a> and <a href=\"https://react-query.tanstack.com/quick-start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Query</a> documentation as we utilized just a small subset of their respective API surfaces.</p>\n<p>You can find the full source code on <a href=\"https://github.com/creatrixity/crypto-portfolio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>.</p>\n<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<ul>\n<li><a href=\"https://uxplanet.org/wizard-design-pattern-8c86e14f2a38\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nick Babich’s UX Planet Wizard Design Pattern Article</a></li>\n<li><a href=\"https://github.com/creatrixity/crypto-portfolio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link to Github Repo</a></li>\n<li><a href=\"https://react-query.tanstack.com/quick-start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Head-first introduction to React Query</a></li>\n<li><a href=\"https://formik.org/docs/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Official Formik Documentation</a></li>\n<li><a href=\"https://www.clicky.co.uk/blog/the-importance-of-form-design/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Importance of Form Design</a></li>\n</ul>","fields":{"slug":"/articles/build-a-react-multi-step-wizard-with-formik-and-react-query","tagSlugs":["/tag/java-script/","/tag/react/","/tag/react-query/","/tag/formik/"]},"frontmatter":{"date":"2021-03-24T10:07:00.121Z","description":"Multi step wizards are a solution allowing complex challenges to be broken down to a list of steps needed to accomplish a goal. Sometimes branching conditional logic is used to narrow the path to be taken by the user..","tags":["JavaScript","React","React Query","Formik"],"title":"Build a React Multi step Wizard with Formik and React Query","socialImage":"https://paper-attachments.dropbox.com/s_E86B1B2D63F07F3F897CF2A503FB8B5EB7AA49926ED9F9E86682B041C6AE0F82_1614667109771_Screenshot+2021-03-02+at+7.38.10+AM.png"}}},"pageContext":{"slug":"/articles/build-a-react-multi-step-wizard-with-formik-and-react-query"}},"staticQueryHashes":["1250832817","251939775","401334301","697386449"]}