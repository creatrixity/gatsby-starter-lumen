{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/pt-6-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/","result":{"data":{"markdownRemark":{"id":"e767df8a-a66a-53ae-a4a8-beefb68f062e","html":"<p><img src=\"https://cdn.steemitimages.com/DQmaQMzZMKHEwiTfzctRt5S1GwvLtAjks6HsNrHXFgbD45S/Skeletal-Loading.gif\" alt=\"FireLiners Skeletal Loading Screen\"></p>\n<p>Users don’t like surprises.</p>\n<p>As a matter of fact, most people are not very comfortable with sudden, unexpected occurrences. This is due to the association of abrupt events and their startling natures with <em>uncertainty</em>. Instinctively, we tend to avoid jarring, unexpected changes to our natural environments.</p>\n<p>To get a better picture, carefully observe the plot sequence in movie releases from the horror genre. You could easily notice a trend; events with the most shock value are typically abrupt introductions of agents (either malevolent or benign) into the set. <a href=\"https://www.vincegowmon.com/nothing-in-nature-is-linear-yet-we-push-and-ready-children-along-straight-pathways/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">It’s a well known physical principle that linear changes do not occur in nature</a>, rather natural mutations are seemingly eased or graduated.</p>\n<p>Since our ideal interaction experiences with digital devices tend to be an approximation of our interaction with everyday items, it is completely rational that we try to model the physical world within our applications. This means the reduction of “surprises” or unexpected occurrences to a bare minimum.</p>\n<p>Typically, most jarring and disorienting changes within user interfaces occur when content is being rendered. First of all, when loading a web resource there is the infamous blank white screen followed by the abrupt appearance of content. While this ought to be really disorienting, <a href=\"https://www.behavioraleconomics.com/mini-encyclopedia-of-be/hedonic-adaptation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hedonic adaptation allows us to simply gloss it over and get on with our business</a>. Modern interfaces designed by some of the most successful tech enterprises work within the constraints of principles governing the user’s mental interaction model.</p>\n<p>Prime among the principles governing the interaction model, is the principle of progressive content rendering. This simply means the appearance of content is first simulated <em>before</em> said content is available to avoid the flash of a blank white screen. Content appearance must first be simulated by displaying visual placeholder content prior to the requested content being available.</p>\n<p>Last time around we explored the use of infinite scrolling techniques to improve perceived responsiveness. Today, we will explore skeletal content placeholder screens as a technique for improving perceived app response times. We will also look at action notifications as an effective feedback mechanism.</p>\n<p><strong>Disclaimer:</strong></p>\n<p>This tutorial may be pretty challenging for a first time reader of this series. I sincerely recommend that visitors get at least a cursory gaze at the previous articles in this series for easier comprehension. Links to the previous articles are available at the bottom of the this tutorial.</p>\n<h4 id=\"repository\" style=\"position:relative;\"><a href=\"#repository\" aria-label=\"repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repository</h4>\n<p><a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Github Repository</a></p>\n<h4 id=\"tutorial-repository\" style=\"position:relative;\"><a href=\"#tutorial-repository\" aria-label=\"tutorial repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tutorial Repository</h4>\n<p><a href=\"https://github.com/creatrixity/fire-liners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FireLiners Github Repository</a></p>\n<h4 id=\"difficulty\" style=\"position:relative;\"><a href=\"#difficulty\" aria-label=\"difficulty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Difficulty</h4>\n<ul>\n<li>Advanced</li>\n</ul>\n<h4 id=\"what-will-i-learn\" style=\"position:relative;\"><a href=\"#what-will-i-learn\" aria-label=\"what will i learn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What Will I Learn?</h4>\n<p>By the time we get to the end of this tutorial, you should be able to apply these techniques to your React apps:</p>\n<ul>\n<li>Reducing user attrition by utilizing layout placeholders or skeletal screen.</li>\n<li>Simulating production level constraints with asynchronous function resolution.</li>\n<li>Leveraging PropTypes for reusable React components.</li>\n<li>Keeping users engrossed and interacting with our app via action notifications as a feedback mechanism.</li>\n<li>Introducing micro-interactions for greater user engagement.</li>\n</ul>\n<h4 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h4>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> 8.0 or greater.</li>\n<li><a href=\"https://npmjs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM</a> 3.0 or greater.</li>\n<li><a href=\"https://yarnpkg.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn</a> package manager</li>\n<li><a href=\"https://github.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git</a></li>\n<li><a href=\"https://github.com/creatrixity/fireliners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FireLiners Github Repository Code</a></li>\n<li>An intermediate level of <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactJS</a> knowledge.</li>\n<li>Keen interest and patience.</li>\n</ul>\n<h3 id=\"brief-introduction\" style=\"position:relative;\"><a href=\"#brief-introduction\" aria-label=\"brief introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brief Introduction.</h3>\n<p>In the brief ramble above, we got a clear picture of the problem. We also clearly outlined the techniques we hope to use to address said problems. We’ll now take a look at skeletal loading screens and what they entail.</p>\n<h4 id=\"skeletal-loading-screens\" style=\"position:relative;\"><a href=\"#skeletal-loading-screens\" aria-label=\"skeletal loading screens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Skeletal Loading Screens:</h4>\n<p>Skeletal loading screens are an anticipatory design technique used to suggest a visual structure for content while it’s still loading. Skeletal loading screens are fairly commonplace and are currently employed by Facebook and YouTube for progressive rendering in their application user interfaces.</p>\n<p>How does skeletal loading work? Its working principle is fairly easy to wrap your head around. Skeletal loading works by detecting the loading state of your app: if your app is currently loading, the skeletal placeholders (usually <code class=\"language-text\">&lt;div>&lt;/div></code>) elements with some styling attached are displayed.</p>\n<p>You can generate a skeletal screen by first observing the fully loaded data state and then attempting to mimic it by using elements styled to resemble the content structure.</p>\n<p>Below are some apps with skeletal loading screens:</p>\n<ul>\n<li><strong>Sofascores Skeletal UI</strong></li>\n</ul>\n<p><img src=\"https://cdn.steemitimages.com/DQmULFnTQr63bfz4RXRJCBUTYLDuiAVeGHjxZC2wv1qnhwY/SofaScore%20UI.png\" alt=\"SofaScore UI.png\"></p>\n<ul>\n<li><strong>Twitter Skeletal</strong></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*tAzqw_10J0uXEPeVzmlvLA.gif\" alt=\"Twitter Skeletal Loading\"></p>\n<h4 id=\"adding-skeletal-screens-to-fireliners\" style=\"position:relative;\"><a href=\"#adding-skeletal-screens-to-fireliners\" aria-label=\"adding skeletal screens to fireliners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding Skeletal Screens to FireLiners</h4>\n<p>You can add skeletal screen functionality by designing it as a React component and toggling it by checking the application’s loading state.</p>\n<p>To save on time, we’ll be using the awesome <a href=\"https://github.com/dvtng/react-loading-skeleton\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">dvtng/react-loading-skeleton</code></a> package. You can get it installed by running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react-loading-skeleton --save</code></pre></div>\n<p>With this package installed, let’s examine our structure once more</p>\n<ul>\n<li>\n<p><strong>fire-liners/</strong></p>\n<ul>\n<li>config/…</li>\n<li>node_modules/…</li>\n<li>public/…</li>\n<li>scripts/…</li>\n<li><strong>src/</strong></li>\n<li>\n<p>assets/</p>\n<ul>\n<li>data/</li>\n<li>authors.json</li>\n<li>liners.json</li>\n<li>img/…</li>\n</ul>\n</li>\n<li>\n<p>components/</p>\n<ul>\n<li>Header/</li>\n<li>index.js</li>\n<li>logo.svg</li>\n</ul>\n</li>\n<li>\n<p>containers/</p>\n<ul>\n<li>App/</li>\n<li>App.test.js</li>\n<li>index.js</li>\n<li>constants.js</li>\n<li>reducer.js</li>\n</ul>\n</li>\n<li>\n<p>redux/</p>\n<ul>\n<li>reducerInjector.js</li>\n<li>reducers.js</li>\n<li>sagas.js</li>\n<li>store.js</li>\n</ul>\n</li>\n<li>\n<p>screens/</p>\n<ul>\n<li>AddLine /</li>\n<li>index.js</li>\n<li>actions.js</li>\n<li>Home /</li>\n<li>index.js</li>\n<li>constants.js</li>\n<li>actions.js</li>\n<li>Loading /</li>\n<li>index.js</li>\n</ul>\n</li>\n<li>\n<p>services/</p>\n<ul>\n<li>DataService/</li>\n<li>index.js</li>\n</ul>\n</li>\n<li>index.js</li>\n<li>registerServiceWorker.js</li>\n<li>package.json</li>\n</ul>\n</li>\n</ul>\n<p>We’d like to add some skeletal loading functionality to our Home screen. To do this, we’ll leverage the <code class=\"language-text\">react-loading-skeleton</code> package and a bit of Boolean toggling logic. Opening up the <code class=\"language-text\">Home</code> class at <code class=\"language-text\">src/screens/Home/index.js</code> we’ll be making some changes. In the <code class=\"language-text\">constructor</code> method, we’ll add a state Boolean property called <code class=\"language-text\">isLoadingLiners</code> and we’ll set it to <code class=\"language-text\">true</code> by default. This means that whenever we start the app, we understand that our liners are yet to load.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            linersSetIndex<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            hasMoreItems<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            linersTotal<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\">// we'll use this to track the current loading progress of our liners.</span>\n           isLoadingLiners<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we’d like our app to fetch liners whenever it runs. We do this by calling the <code class=\"language-text\">this.props.fetchLiners</code> method. After we fetch the liners, we’d like to wait for about 3500 milliseconds before we switch off the loading state. We do this by calling <code class=\"language-text\">this.setState</code> and setting the <code class=\"language-text\">isLoadingLiners</code> to false within a <code class=\"language-text\">setTimeout</code> function effectively letting our app now we’re done with loading. This is done to ensure that we are able to reasonably simulate production environments.</p>\n<p>Since we are loading our data from a JSON file, loading is nearly instantaneous however this is not the case on production environments as only the fastest 4G networks can guarantee near instantaneous loading. So, we use the <code class=\"language-text\">setTimeout</code> call to simulate production levels of uncertainty.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Previous code here...</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">fetchLiners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            linersSetIndex<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>linersSetIndex\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                isLoadingLiners<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also, we’ll be applying the same technique to our <code class=\"language-text\">fetchMoreData</code> method that is called by our Infinite Scroll component whenever we need to fetch more liners. In this method, we start of by setting the <code class=\"language-text\">isLoadingLiners</code> local state property to <code class=\"language-text\">true</code> to signify that we’re loading liners. Within the <code class=\"language-text\">setTimeout</code> call, we wait for 1500 milliseconds and then we send a request to fetch liners. We also switch off loading by setting <code class=\"language-text\">isLoadingLiners</code> to <code class=\"language-text\">false</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">fetchMoreData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// a fake async api call like which sends</span>\n  <span class=\"token comment\">// 20 more records in 1.5 secs</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    isLoadingLiners<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasMoreItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// previous code</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">fetchLiners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        linersSetIndex<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>linersSetIndex<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        isLoadingLiners<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Great! We are now able to switch our loading on and off and even simulate loading using the asynchronous <code class=\"language-text\">setTimeout</code> call. Next, we need to fix our <code class=\"language-text\">&lt;Feed/></code> component to enable it work with skeletal loading properly. We’ll be introducing the <code class=\"language-text\">isLoading</code> attribute to the <code class=\"language-text\">Feed</code> component props in our <code class=\"language-text\">render</code> method. We’ll set the value to be equal to the <code class=\"language-text\">isLoadingLiners</code> state Boolean. This will help us communicate to the <code class=\"language-text\">Feed</code> component the current state of our loading.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Feed\n  liners<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>liners<span class=\"token punctuation\">}</span>\n  linersSetIndex<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>linersSetIndex<span class=\"token punctuation\">}</span>\n  authors<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">}</span>\n  isLoading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoadingLiners<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>It’s now time to work on our <code class=\"language-text\">Feed</code> component class. We’ll be enforcing <code class=\"language-text\">proptypes</code> within our <code class=\"language-text\">Feed</code> component. To help us do this, we’ll simply need to import the <code class=\"language-text\">PropTypes</code> class from the <code class=\"language-text\">prop-types</code> package. We’ll also be importing the <code class=\"language-text\">Skeleton</code> component from <code class=\"language-text\">react-loading-skeleton</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Skeleton <span class=\"token keyword\">from</span> <span class=\"token string\">'react-loading-skeleton'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://cdn.steemitimages.com/DQmUN8gKHaNLiJvUC2GAKHmoAJxdoWs3u4rqDHffEpqgV8F/HomeAuthorImage.png\" alt=\"HomeScreen Author Image\"></p>\n<p>We’ll also be making changes to the JSX markup we have in the <code class=\"language-text\">render</code> method. The markup below is responsible for rendering the photo of the <code class=\"language-text\">author</code>. Thankfully, we had enough sense to make a placeholder-like <code class=\"language-text\">Circle</code> component. We’d like to only show a simple gray circle if the liner data is not fully available. To do this, we run a check that only shows the image if:</p>\n<ul>\n<li><code class=\"language-text\">props.isLoading</code> is false. This stops us from showing the image if the <code class=\"language-text\">isLoading</code> property value is <code class=\"language-text\">false</code>.</li>\n<li>The number of liners is greater than or equal to the index of the current liner under evaluation: Let’s make it a little easier to understand. We’ll assume we’ve got five liners at first and the current liner is the sixth liner. Since six is greater than five, the image is not rendered at first, however when the liners are updated to ten, then the image is rendered.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Circle bg<span class=\"token operator\">=</span><span class=\"token string\">\"#d5d5d5\"</span> mr<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span> justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span> align<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>liners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> index\n    <span class=\"token operator\">?</span> <span class=\"token function\">getLinerAuthor</span><span class=\"token punctuation\">(</span>liner<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>photo <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Image\n          src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../../assets/img/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getLinerAuthor</span><span class=\"token punctuation\">(</span>liner<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>photo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'60px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Circle<span class=\"token operator\">></span></code></pre></div>\n<p>We also apply the above to the body of the liner. Here, we resort to showing a skeleton composed of three full width lines to represent the liners if our app is still loading liners. We can generate the number of lines required by simply passing in a value to the <code class=\"language-text\">count</code> prop.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Text mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> italic fontSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>liners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> index <span class=\"token operator\">?</span> liner<span class=\"token punctuation\">.</span>body <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Skeleton count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span></code></pre></div>\n<p>We also do the same for the author name. This time however, we don’t want a very long line (names are usually short) so we generate a line that is <code class=\"language-text\">100px</code> long by passing <code class=\"language-text\">100</code> to the <code class=\"language-text\">width</code> prop. We also place it within a <code class=\"language-text\">Flex</code> component with the flex direction set to <code class=\"language-text\">row-reverse</code> as this helps us put the line to the right.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>liners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> index <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'/authors/'</span> <span class=\"token operator\">+</span> <span class=\"token function\">getLinerAuthor</span><span class=\"token punctuation\">(</span>liner<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text fontSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"gray\"</span> align<span class=\"token operator\">=</span><span class=\"token string\">\"right\"</span> bold<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>liner<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Flex flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"row-reverse\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Skeleton width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Awesome! We’re done with our mini skeletal screen. You can see skeletal loading below.</p>\n<p><img src=\"https://cdn.steemitimages.com/DQmaQMzZMKHEwiTfzctRt5S1GwvLtAjks6HsNrHXFgbD45S/Skeletal-Loading.gif\" alt=\"FireLiners Skeletal Loading Screen\"></p>\n<h4 id=\"action-notifications-as-a-feedback-mechanism\" style=\"position:relative;\"><a href=\"#action-notifications-as-a-feedback-mechanism\" aria-label=\"action notifications as a feedback mechanism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action Notifications as a Feedback Mechanism.</h4>\n<p>Before we proceed, let’s step back a little and role play. In today’s scenario, you are an impatient shopper with a really long wish list. You visit the nearby mart and you fill your trolley. You pull up to the attendant for a checkout and you ask, “Hi, I’d like to pay for my stuff.” surprisingly you get no response. You keep going on but yet again no acknowledgement. You storm out of the establishment frustrated. The previous story displayed is analogous to the scenario that plays out when you offer no indicators to your users when they perform an action.</p>\n<p>On optimum user experience is all-encompassing as it involves you making sure all sources of pain for your users are eliminated. A typical pain point for users is the process of form submission especially asynchronous form submission. The pain involved usually emanates from the uncertainty generated by some actions. For example, if you attempt to submit a form on the web, you usually expect some form of interaction or feedback to enable you know if your form submission is being processed or if it has failed.</p>\n<p>We’ll be adding subtle action notifications as feedback for our app. These notifications will be twofold:</p>\n<ol>\n<li>Small interactions for user triggered events.</li>\n<li>Success notifications for users whenever an action is completed.</li>\n</ol>\n<p>We’ll be adding an interaction that allows us to signal to the user that their action is underway. We’ll be adding this interaction to the button with which we’ll submit our liners. To do this, we’ll display a little loading indicator along with descriptive text when we attempt a submit. We’ll also be adding micro-interactions for our application’s loading screens. We’ll grab the <a href=\"https://www.npmjs.com/package/react-spinners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-spinners</code></a> dependency and be on our way.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save react-spinners</code></pre></div>\n<p>We’ll first start by adding some loading spinners to the loading screen. Open up <code class=\"language-text\">src/screens/Loading/index.js</code> and we’ll get to work. We’ll simply import the <code class=\"language-text\">SyncLoader</code> spinner type that comes with a really cool bouncing animation. We’ll then position the sync loader in the middle of our loading screen. How cool is that?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SyncLoader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-spinners'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AppLoadingScreen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Flex\n    style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span><span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> <span class=\"token string\">'fixed'</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bottom<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    bg<span class=\"token operator\">=</span><span class=\"token string\">\"lightYellow\"</span>\n    flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span>\n    align<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span>\n    justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span>\n  <span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>SyncLoader color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'#a1a1a1'</span><span class=\"token punctuation\">}</span> loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>Text mt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span> bold<span class=\"token operator\">></span>\n      Whipping up Awesomeness<span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’ll also add this micro-interaction to our Infinite Scroll loader. We can do this by editing the Home Screen class available at <code class=\"language-text\">src/screens/Home/index.js</code> and modifying the Infinite Scroll instantiation code to use the <code class=\"language-text\">SyncLoader</code> instead of text. We update the style for the Infinite Scroll list to prevent annoying scrollbars from popping up. We then simply instantiate our <code class=\"language-text\">SyncLoader</code> where our text used to be.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InfiniteScroll</span>\n        <span class=\"token attr-name\">dataLength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{this.props.liners.length}</span>\n        <span class=\"token attr-name\">next</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{this.fetchMoreData}</span>\n        <span class=\"token attr-name\">hasMore</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{this.state.hasMoreItems}</span>\n        <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value css language-css\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span></span></span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">height:</span></span> <span class=\"token attr-name\">'inherit</span> <span class=\"token attr-name\">!important',</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">'overflow':</span></span> <span class=\"token attr-name\">'hidden</span> <span class=\"token attr-name\">!important'</span>\n        <span class=\"token attr-name\">}}</span>\n        <span class=\"token attr-name\">loader</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{</span>\n            <span class=\"token attr-name\">&lt;Flex</span> <span class=\"token attr-name\">justify</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alignItems</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                &lt;SyncLoader\n                  color={'#a1a1a1'}\n                  size={10}\n                  loading={true}\n                />\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Flex</span><span class=\"token punctuation\">></span></span>\n        }\n        endMessage={\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value css language-css\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token property\">textAlign</span><span class=\"token punctuation\">:</span></span></span></span> <span class=\"token attr-name\">'center'}}</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>Homie, you done seen all the liners we got.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        }\n  >\n //...other code\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InfiniteScroll</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"creating-an-action-indicator-for-our-submit-action\" style=\"position:relative;\"><a href=\"#creating-an-action-indicator-for-our-submit-action\" aria-label=\"creating an action indicator for our submit action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an Action Indicator for our Submit Action.</h4>\n<p>We’ll now attempt to create an action indicator for our Submit button. We’ll hop over to our <code class=\"language-text\">src/screens/AddLine/index.js</code> and make some changes. First of all, we’ll use the <code class=\"language-text\">ScaleLoader</code> now available thanks to <code class=\"language-text\">react-spinners</code> and we’ll also add a new state property called <code class=\"language-text\">isSubmitting</code>. We’ll use this Boolean state property to keep track of our submission. By default, we set it to <code class=\"language-text\">false</code> but we’ll make it <code class=\"language-text\">true</code> when we make a submission. We’ll also simulate production level constraints by using <code class=\"language-text\">setTimeout</code> before adding our liner.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ScaleLoader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-spinners'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AddLine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...previous code</span>\n      isSubmitting<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we modify our <code class=\"language-text\">RedButton</code> (our submit button), We disable the button once a submission action is in progress. This keeps users from making double submissions. We also check if we’re currently making a submission and if we are currently doing so, we show our <code class=\"language-text\">ScaleLoader</code> along with some descriptive text. If we are not currently submitting, we simply show the regular text.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>RedButton disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isSubmitting<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isSubmitting <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Save and go back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Flex<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text mr<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Submitting<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>ScaleLoader color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">17</span><span class=\"token punctuation\">}</span> loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RedButton<span class=\"token operator\">></span></code></pre></div>\n<p>In our <code class=\"language-text\">handleSubmit</code> event handler, we start of by setting <code class=\"language-text\">isSubmitting</code> to <code class=\"language-text\">true</code> to set the stage. We then wrap our submission code within the <code class=\"language-text\">setTimeout</code> function to simulate production level environments. Finally, we also introduce a method called <code class=\"language-text\">this.props.addNotification</code> that will be our next focus.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">handleSubmit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isSubmitting<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> newID <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>liners<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">maxId<span class=\"token punctuation\">,</span> liner</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxId<span class=\"token punctuation\">,</span> liner<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">addLiner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                id<span class=\"token operator\">:</span> newID<span class=\"token punctuation\">,</span>\n                author<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span>\n                body<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>body\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">addNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                type<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n                message<span class=\"token operator\">:</span> <span class=\"token string\">'Added new liner.'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here’s our little micro-interaction in action.</p>\n<p><img src=\"https://cdn.steemitimages.com/DQmVR9rssJkKLyfE9qVCauXb3N7ABbgEbtUWNqjUEsaRt1d/Micro-interaction.gif\" alt=\"Micro-interaction.gif\"></p>\n<h4 id=\"creating-app-level-notifications-for-our-liners\" style=\"position:relative;\"><a href=\"#creating-app-level-notifications-for-our-liners\" aria-label=\"creating app level notifications for our liners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating App Level Notifications for our Liners.</h4>\n<p>We did great by adding micro-interactions for actions taken by our users when using our applications. We can now fully augment the experience by adding app level notifications. We’ll use these to indicate that actions have been successful or otherwise.</p>\n<p><strong>How do App Level Notifications Work?</strong></p>\n<p>Well, app level notifications are simply items in an array that we can go through and display to the user. It’s really that simple.</p>\n<p>To add app level notification functionality, we’ll edit the core <code class=\"language-text\">App</code> class and make some provisions for them. We’ll edit <code class=\"language-text\">src/containers/App/index.js</code> and get to work.</p>\n<p>First of all, let’s grab our dependencies. We’ll import the Priceline <code class=\"language-text\">Banner</code> component and the <code class=\"language-text\">deleteNotification</code> method from our <code class=\"language-text\">actions.js</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider<span class=\"token punctuation\">,</span> Flex<span class=\"token punctuation\">,</span> Banner <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pcln-design-system'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> deleteNotification <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./actions'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next we’ll check if we have any notifications and if we do we’ll go through all the notifications available within <code class=\"language-text\">this.props.notifications</code> and display them. We’ll define <code class=\"language-text\">this.props.notifications</code> soon. We’ll use Priceline’s <code class=\"language-text\">Flex</code> component to keep the notifications just to the right of our liners feed. We also make sure we iterate through our notifications and for each notification we render a <code class=\"language-text\">Banner</code> component (also made available to us by Priceline design system). Within the <code class=\"language-text\">onClose</code> handler (triggered when we hit the close button) we call the <code class=\"language-text\">deleteNotification</code> action that we’ll define soon passing the current notification as an argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>notifications<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Flex<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Flex\n        width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.27</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          position<span class=\"token operator\">:</span> <span class=\"token string\">'fixed'</span><span class=\"token punctuation\">,</span>\n          top<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n          right<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span>\n        p<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>notifications<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">notification<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>Banner\n            key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n            bg<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notification<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'info'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'darkBlue'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">}</span>\n            py<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n            px<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n            iconName<span class=\"token operator\">=</span><span class=\"token string\">\"circleInfo\"</span>\n            iconSize<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span>\n            onClose<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">deleteNotification</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            showIcon<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n            mb<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n              color<span class=\"token operator\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n              borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">,</span>\n              fontSize<span class=\"token operator\">:</span> <span class=\"token string\">'11px'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            textAlign<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span>\n            text<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notification<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Flex<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also make sure we define <code class=\"language-text\">this.props.notifications</code> and <code class=\"language-text\">this.props.deleteNotification</code> below. We use the ever-useful <code class=\"language-text\">mapStateToProps</code> and <code class=\"language-text\">mapDispatchToProps</code> to do this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    notifications<span class=\"token operator\">:</span> <span class=\"token function\">getAppState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notifications'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">fetchAuthors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchAuthorsRequest</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">deleteNotification</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">deleteNotification</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We now need to define the <code class=\"language-text\">deleteNotification</code> method at <code class=\"language-text\">src/containers/App/actions.js</code>. We import a couple of constants that we’ll be defining soon. We also define the <code class=\"language-text\">deleteNotification</code> and <code class=\"language-text\">addNotification</code> methods. These are fairly standard right about now.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DELETE_NOTIFICATION_REQUEST</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./constants'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteNotification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">DELETE_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNotification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’ll also define some new constants at <code class=\"language-text\">src/containers/App/constants.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_NOTIFICATION</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/ADD_NOTIFICATION'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_NOTIFICATION_REQUEST</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/ADD_NOTIFICATION_REQUEST'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DELETE_NOTIFICATION</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/DELETE_NOTIFICATION'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DELETE_NOTIFICATION_REQUEST</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/DELETE_NOTIFICATION_REQUEST'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REDUCER_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’ll also need a saga to process our actions. Let’s create <code class=\"language-text\">src/containers/App/saga.js</code>. We import our dependencies which are constants and some methods from the <code class=\"language-text\">redux-saga</code> package.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> all<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> takeLatest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">ADD_NOTIFICATION</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ADD_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DELETE_NOTIFICATION</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DELETE_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./constants'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we’ll define a couple of saga handler methods. We’ll use <code class=\"language-text\">addNotification</code> and <code class=\"language-text\">deleteNotification</code> methods to dispatch corresponding actions to the store.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">addNotification</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_NOTIFICATION</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">deleteNotification</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">DELETE_NOTIFICATION</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we define our export function. In this export function, we’ll simply take the latest action requests and delegate them to the appropriate method.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * We process only the latest action\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span> addNotification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DELETE_NOTIFICATION_REQUEST</span><span class=\"token punctuation\">,</span> deleteNotification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ll now need to add this saga to our <code class=\"language-text\">src/redux/sagas.js</code> file so our app knows to load this saga when it runs.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> AppSaga <span class=\"token keyword\">from</span> <span class=\"token string\">'../containers/App/saga'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * rootSaga\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>AppSaga<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// previous code</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"defining-our-reducer\" style=\"position:relative;\"><a href=\"#defining-our-reducer\" aria-label=\"defining our reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining Our Reducer.</h4>\n<p>Our very last step for this phase of our notifications system is the updating of our reducers. We can do this by editing <code class=\"language-text\">src/containers/App/reducer.js</code> and making some changes. We’ll first import some constants.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ADD_NOTIFICATION</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">DELETE_NOTIFICATION</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we’ll update our initial state object. We’ll set an empty <code class=\"language-text\">notifications</code> array to hold our info.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notifications<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// previous code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’ll now handle <code class=\"language-text\">ADD_NOTIFICATION</code> actions. When a notification is sent, we’d like to do three (3) things.</p>\n<ol>\n<li>Calculate a new <code class=\"language-text\">id</code> for the new notification.</li>\n<li>Add the calculated <code class=\"language-text\">id</code> to the new notification data &#x26;</li>\n<li>Push the new notification into the notifications array.</li>\n</ol>\n<p>We calculate the new id using JavaScript’s <code class=\"language-text\">reduce</code> method. We use the spread operator to extract the action’s payload data into a new object. We then push that new object into an array.</p>\n<p><img src=\"http://a.t\" alt=\"ID Calculation code\"><img src=\"https://cdn.steemitimages.com/DQmdtScQZ4QcBXHZC8CuKPFJJd44Gr9dv3EzGnSoRH3juXQ/ID-Calculation.png\" alt=\"ID-Calculation.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">        <span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_NOTIFICATION</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">let</span> notification <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                id<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notifications'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">largest<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>largest<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>data\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"notifications\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span>\n                    state\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notifications'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For our delete notifications functionality, we simply set the notifications array to a new array that excludes the notification we wish to delete. We do this using the <code class=\"language-text\">filter</code> method to exclude notifications matching the one we want to remove.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">        <span class=\"token keyword\">case</span> <span class=\"token constant\">DELETE_NOTIFICATION</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"notifications\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">fromJS</span><span class=\"token punctuation\">(</span>\n                    state\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notifications'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">notification</span> <span class=\"token operator\">=></span> notification<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, we’ve accomplished our goal today. You can see our application in action below.</p>\n<p><img src=\"https://cdn.steemitimages.com/DQmXfjk4FoqbsbX3cCyxZj2Q5Xg7ZmKpyL7jHsNJxNn1hQw/Skeletal-with-micro.gif\" alt=\"App Level Notifications and Micro-Interactions in view here\"></p>\n<h4 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h4>\n<p>In this tutorial, we covered multiple concepts. We learned more about the importance of perceived fast loading in the success of our applications. We also added skeletal loading to the FireLiners application. We then added app-level notifications and user facing micro-interactions for data loading and asynchronous actions without connecting to an external API.</p>\n<p>In our next tutorial, we’ll explore more advanced performance techniques. We’ll look at interactive lazy-loading as opposed to passive lazy-loading as a means of increasing perceived application responsiveness.</p>\n<h4 id=\"proof-of-work\" style=\"position:relative;\"><a href=\"#proof-of-work\" aria-label=\"proof of work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Work</h4>\n<ul>\n<li><strong>App Level Notifications and Micro-Interactions in view_</strong></li>\n</ul>\n<p><img src=\"https://cdn.steemitimages.com/DQmXfjk4FoqbsbX3cCyxZj2Q5Xg7ZmKpyL7jHsNJxNn1hQw/Skeletal-with-micro.gif\" alt=\"App Level Notifications and Micro-Interactions in view here\"></p>\n<h4 id=\"curriculum\" style=\"position:relative;\"><a href=\"#curriculum\" aria-label=\"curriculum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Curriculum</h4>\n<ul>\n<li><a href=\"https://www.kaymathew.com/articles/pt-1-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part One: Build a CSS-in-JS App With Styled Components and Priceline Design System</a></li>\n<li><a href=\"https://www.kaymathew.com/articles/pt-2-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part Two: Build a CSS-in-JS App With Styled Components and Priceline Design System</a></li>\n<li><a href=\"https://www.kaymathew.com/articles/pt-3-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part Three: Build a CSS-in-JS App With Styled Components and Priceline Design System</a></li>\n<li><a href=\"https://www.kaymathew.com/articles/pt-4-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part Four: Build a CSS-in-JS App With Styled Components and Priceline Design System</a></li>\n<li><a href=\"https://www.kaymathew.com/articles/pt-5-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Part Five: Build a CSS-in-JS App With Styled Components and Priceline Design System</a></li>\n</ul>\n<h4 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h4>\n<ul>\n<li><a href=\"https://github.com/dvtng/react-loading-skeleton\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Skeletal Loader Component Intro</a></li>\n<li><a href=\"https://www.npmjs.com/package/react-spinners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Spinners Component Docs</a></li>\n<li><a href=\"http://github.com/creatrixity/fire-liners\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fireliners Github Code available here</a></li>\n<li><a href=\"https://www.invisionapp.com/blog/use-microinteractions-improve-ux-design/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How Micro-Interactions improve UX Design</a></li>\n<li><a href=\"https://pricelinelabs.github.io/design-system/Banner\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Priceline Design System Banner Docs</a></li>\n<li><a href=\"https://www.vincegowmon.com/nothing-in-nature-is-linear-yet-we-push-and-ready-children-along-straight-pathways/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Non-Linearity in Nature</a></li>\n<li><a href=\"https://www.behavioraleconomics.com/mini-encyclopedia-of-be/hedonic-adaptation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A short introduction on Hedonic Adaptation</a></li>\n</ul>","fields":{"slug":"/articles/pt-6-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/","tagSlugs":["/tag/javascript/","/tag/react/"]},"frontmatter":{"date":"2018-06-22T23:46:37.121Z","description":"Last time around we explored the use of infinite scrolling techniques to improve perceived responsiveness. Today, we will explore skeletal content placeholder screens as a technique for improving perceived app response times. We will also look at action notifications as an effective feedback mechanism.","tags":["Javascript","React"],"title":"Pt 6: Build a CSS-in-JS React App with Styled Components and Priceline Design System","socialImage":"https://steemitimages.com/256x512/https://cdn.steemitimages.com/DQmaQMzZMKHEwiTfzctRt5S1GwvLtAjks6HsNrHXFgbD45S/Skeletal-Loading.gif"}}},"pageContext":{"slug":"/articles/pt-6-build-a-css-in-js-react-app-with-styled-components-and-priceline-design-system/"}},"staticQueryHashes":["1250832817","251939775","401334301","697386449"]}